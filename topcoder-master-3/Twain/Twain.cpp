#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Twain {
public:
	string getNewSpelling(int year, string phrase) {
        int y = 1;
        while (y <= year) {
	        int N = phrase.size();
            string tmp = "";
            if (y == 1) {
                for (int i = 0; i < N; ++i) {
                    if (phrase[i] == 'x') {
                        if (i == 0 || phrase[i-1] == ' ')
                            tmp.push_back('z');
                        else
                            tmp.append("ks");
                    }
                    else 
                        tmp.push_back(phrase[i]);
                }
            }
            else if (y == 2) {
                for (int i = 0; i < N; ++i) {
                    if (phrase[i] == 'y') 
                        tmp.push_back('i');
                    else
                        tmp.push_back(phrase[i]);
                } 
            }
            else if (y == 3) {
                for (int i = 0; i < N; ++i) {
                    if (phrase[i] == 'c' &&  i+1 < N && (phrase[i+1] == 'e' || phrase[i+1] == 'i'))
                        tmp.push_back('s');
                    else
                        tmp.push_back(phrase[i]);
                }
            }
            else if (y == 4) {
                for (int i = 0; i < N; ++i) {
                    if (phrase[i] == 'c') {
                        int j = i;
                        while (j < N && phrase[j] == 'c') ++j;
                        if (j != N && phrase[j] == 'k') i = j;
                    }
                    tmp.push_back(phrase[i]);
                } 
            }
            else if (y == 5) {
                int i = 0;
                while (i < N) {
                    if ((i == 0 || phrase[i-1] == ' ')
                            && (phrase[i] == 's')
                            && (i+1 < N && phrase[i+1] == 'c')
                            && (i+2 < N && phrase[i+2] == 'h')) {
                        tmp.append("sk");
                        i += 3;
                    }
                    else if (phrase[i] == 'c'
                            && (i+1 < N && phrase[i+1] == 'h')
                            && (i+2 < N && phrase[i+2] == 'r')) {
                        tmp.append("kr");
                        i += 3;
                    }
                    else if (phrase[i] == 'c'
                            && (i+1 == N || phrase[i+1] != 'h')) {
                        tmp.push_back('k');
                        i += 1;
                    }
                    else {
                        tmp.push_back(phrase[i]);
                        i += 1;
                    }
                }
            }
            else if (y == 6) {
                for (int i = 0; i < N; i++) {
                    if ((i == 0 || phrase[i-1] == ' ')
                            && phrase[i] == 'k'
                            && (i+1 < N && phrase[i+1] == 'n'))
                        ++i;
                    tmp.push_back(phrase[i]);
                }
            }
            else if (y == 7) {
                int i = 0;
                while (i < N) {
                    tmp.push_back(phrase[i]);
                    ++i;
                    if (phrase[i-1] == 'a' || phrase[i-1] == 'e' || phrase[i-1] == 'i' || phrase[i-1] == 'o' || phrase[i-1] == 'u' || phrase[i-1] == ' ') continue; 
                    while (i < N && phrase[i] == phrase[i-1]) ++i;
                }
            }
            //cout << y << ":" << tmp << endl;
            phrase = tmp;
            ++y;
        }	
        return phrase;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, string p1, bool hasAnswer, string p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << "\"" << p1 << "\"";
    cout << "]" << endl;
    Twain *obj;
    string answer;
    obj = new Twain();
    clock_t startTime = clock();
    answer = obj->getNewSpelling(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p2 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    string p1;
    string p2;

    {
        // ----- test 0 -----
        p0 = 1;
        p1 = "i fixed the chrome xerox by the cyclical church";
        p2 = "i fiksed the chrome zeroks by the cyclical church";
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 2;
        p1 = "i fixed the chrome xerox by the cyclical church";
        p2 = "i fiksed the chrome zeroks bi the ciclical church";
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 0;
        p1 = "this is unchanged";
        p2 = "this is unchanged";
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 7;
        p1 = "sch kn x xschrx cknnchc cyck xxceci";
        p2 = "sk n z zskrks nchk sik zksesi";
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 7;
        p1 = "  concoction   convalescence   cyclical   cello   ";
        p2 = "  konkoktion   konvalesense   siklikal   selo   ";
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 7;
        p1 = "";
        p2 = "";
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        p0 = 7;
        p1 = "cck xzz aaaaa";
        p2 = "k z aaaaa";
        all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 7 -----
        p0 = 6;
        p1 = "kooc cooc cooc cooc cooc";
        p2 = "kook kook kook kook kook";
        all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
