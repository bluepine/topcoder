#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class VendingMachine {
public:
    int motorUse(vector <string> prices, vector <string> purchases) {
        vector<vector<int> > products = tokmat(prices, " ");
        vector<vector<int> > events = tokmat(purchases, ",:");
        int M = products.size();
        int N = products[0].size();
        int L = events.size();
        int res = 0;
        int cur = 0;
        for (int i = -1; i < L; i++) {
            if (i >= 0) {
                int next = events[i][1];
                res += min((next-cur+N)%N, (cur-next+N)%N);
                cur = next;
                if (products[events[i][0]][cur] == 0) return -1;
                products[events[i][0]][cur] = 0;
            }
            if (i == -1 || i == L-1 || (events[i+1][2]- events[i][2] >= 5)){
                int max = 0;
                int next = 0;
                for (int j = 0; j < N; j++) {
                    int sum = 0;
                    for (int k = 0; k < M; k++)
                        sum += products[k][j];
                    if (sum > max) {
                        max = sum;
                        next = j;
                    }
                }
                res += min((next-cur+N)%N, (cur-next+N)%N);
                cur = next;
            }
        }
        return res;
    }

    vector<string> tokenize(string s, string ch) {
        vector<string> res;
        for(int p = 0, p2; p < (int)s.size(); p = p2+1) {
            p2 = s.find_first_of(ch, p);
            if( p2 == -1 ) p2 = s.size();
            if( p2-p > 0 ) res.push_back(s.substr(p, p2-p));
        }
        return res;
    }

    vector<int> tokint(string s, string ch) {
        vector<int> res;
        vector<string> p = tokenize(s, ch);
        for(int i = 0; i < (int)p.size(); i++)
            res.push_back(atoi(p[i].c_str()));
        return res;
    }

    vector<vector<int> > tokmat(vector<string> s, string ch) {
        vector<vector<int> > res;
        for(int i = 0; i < (int)s.size(); i++)
            res.push_back(tokint(s[i], ch));
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    VendingMachine *obj;
    int answer;
    obj = new VendingMachine();
    clock_t startTime = clock();
    answer = obj->motorUse(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;
    int p2;

    {
        // ----- test 0 -----
        string t0[] = {"100 100 100"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0,0:0","0,2:5","0,1:10"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 4;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"100 200 300 400 500 600"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0,2:0","0,3:5","0,1:10","0,4:15"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 17;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"100 200 300 400 500 600"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0,2:0","0,3:4","0,1:8","0,4:12"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 11;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"100 100 100"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0,0:10","0,0:11"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = -1;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"100 200 300","600 500 400"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0,0:0","1,1:10","1,2:20","0,1:21","1,0:22","0,2:35"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 6;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
