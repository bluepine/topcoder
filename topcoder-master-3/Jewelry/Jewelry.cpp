#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

void pc(vector<vector<int> > & cs) {
    for (int i = 0; i < (int)cs.size(); i++)
        cs[i][0] = cs[i][i] = 1;
    for (int i = 1; i < (int)cs.size(); i++)
        for (int j = 1; j < (int)cs.size(); j++)
            cs[i][j] = cs[i-1][j-1]+cs[i-1][j];
}

void ps(vector<int> & vs, vector<vector<int> > & ss) {
    for (int i = 0; i < (int)ss.size(); i++)
        ss[i][0] = 1;
    for (int i = 1; i < (int)ss.size(); i++) {
        for (int j = 1; j < (int)ss[0].size(); j++) {
            ss[i][j] = ss[i-1][j];
            if (j-vs[i-1] >= 0)
                ss[i][j] += ss[i-1][j-vs[i-1]];
        }
    }
}

class Jewelry {
public:
    long long howMany(vector <int> vs) {
        int M = vs.size();
        vector<vector<int> > cs(M+1, vector<int>(M+1, 0));
        pc(cs);
        //cout << "cs" << endl;
        //for (int i = 0; i < M; i++) {
        //    for (int j = 0; j <= i; j++)
        //        cout << cs[i][j] << " ";
        //    cout << endl;
        //}

        int N = 0;
        for (int i = 0; i < M; i++)
            N += vs[i];

        vector<vector<int> > bs(M+1, vector<int>(N+1, 0));
        sort(vs.begin(), vs.end(), greater<int>());
        ps(vs, bs);
        //cout << "bs" << endl;
        //for (int i = 0; i <= M; i++) {
        //    for (int j = 0; j <= 10; j++)
        //        cout << bs[i][j] << " ";
        //    cout << endl;
        //}

        vector<vector<int> > fs(M+1, vector<int>(N+1, 0));
        sort(vs.begin(), vs.end());
        ps(vs, fs);
        //cout << "fs" << endl;
        //for (int i = 0; i <= M; i++) {
        //    for (int j = 0; j <= 10; j++)
        //        cout << fs[i][j] << " ";
        //    cout << endl;
        //}

        long long res = 0ll;
        int i = 0;
        while (i < M) {
            int j = i;
            while (j < M && vs[j] == vs[i]) j++;
            int c = j-i;
            for (int k = 1; k <= c; k++) {
                int s = k*vs[i];
                for (int l = s; l <= N; l++) {
                    res += ((long long)fs[i][l-s])*bs[M-i-k][l]*cs[c][k];
                }
            }
            i = j;
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    Jewelry *obj;
    long long answer;
    obj = new Jewelry();
    clock_t startTime = clock();
    answer = obj->howMany(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 20) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    long long p1;

    {
        // ----- test 0 -----
        int t0[] = {1,2,5,3,4,5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 9ll;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 18252025766940ll;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
    // ----- test 2 -----
    int t0[] = {1,2,3,4,5};
    		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 4ll;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    int t0[] = {7,7,8,9,10,11,1,2,2,3,4,5,6};
    		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 607ll;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    int t0[] = {123,217,661,678,796,964,54,111,417,526,917,923};
    		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 0ll;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
