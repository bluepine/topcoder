#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class QuickSums {
public:
	int minSums(string numbers, int sum) {
        int N = numbers.size();
        int I = 1<<(N-1);
	    vector<vector<int> > vvi;
        for (int i = 0; i < I; ++i) {
            int k = i;
            int j = 1;
            vector<int> vi;
            while (k > 0) {
                if (k & 0x01) vi.push_back(j); 
                k >>= 1;
                ++j;
            }
            sort(vi.begin(), vi.end());
            vvi.push_back(vi);
        }

        //for (auto it1: vvi) {
            //for (auto it2 : it1)
                //cout << it2 << " ";
            //cout << endl;
        //}
        for (int k = 0; k < N; ++k) {
            for (int i = 0; i < (int)vvi.size(); ++i) {
                if ((int)vvi[i].size() == k) {
                   if (sum == getSum(numbers, vvi[i], N))
                       return k;
                }
            }
        }
        return -1;
    }

    int getSum(string & numbers, vector<int> & vi, int N) {
        int res = 0;
        string str = "";
        int p1 = 0, p2 = 0;
        vi.push_back(N);
        for (int i = 0; i < (int)vi.size(); i++) {
            p2 = vi[i];
            str = numbers.substr(p1, p2-p1);
            int j = 0;
            while (j < (int)str.size() && str[j] == '0') {
                str[j] = ' ';
                ++j;
            }
            //cout << str << " ";
            istringstream is(str);
            int num = 0;
            is >> num;
            res += num;
            p1 = p2;
        }
        //cout << endl;
        //cout << "res:" << res << endl;
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
    cout << "]" << endl;
    QuickSums *obj;
    int answer;
    obj = new QuickSums();
    clock_t startTime = clock();
    answer = obj->minSums(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    int p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = "99999";
        p1 = 45;
        p2 = 4;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
    // ----- test 1 -----
    p0 = "1110";
    p1 = 3;
    p2 = 3;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 2 -----
    p0 = "0123456789";
    p1 = 45;
    p2 = 8;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 3 -----
    p0 = "99999";
    p1 = 100;
    p2 = -1;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 4 -----
    p0 = "382834";
    p1 = 100;
    p2 = 2;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 5 -----
    p0 = "9230560001";
    p1 = 71;
    p2 = 4;
    all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
