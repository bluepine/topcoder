#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int word_match[8];
int cube_match[8];

class PlayingCubes {
public:
	vector <int> composeWords(vector <string> cubes, vector <string> words) {
	    vector<int> res;
        for (int i = 0; i < (int)words.size(); i++)
            if (match(words[i], cubes))
                res.push_back(i);
        return res;
	}

    bool match(string & word, vector<string> & cubes) {
        for (int i = 0; i < 8; i++)
            word_match[i] = -1;
        for (int j = 0; j < 8; j++)
            cube_match[j] = -1;
        //cout << word << endl;
        for (int i = 0; i < (int)word.size(); i++) {
            if (!bfs(i, word, cubes))
                return false;
        }
        return true;
    }

    bool bfs(int src, string & word, vector<string> & cubes) {
        int from[8];
        for (int i = 0; i < 8; i++)
            from[i] = -1;
        from[src] = src;
        queue<int> q;
        q.push(src);
        bool found = false;
        int where = -1, match = -1;
        while (!q.empty() && !found) {
            where = q.front(); q.pop();
            //cout << "where:" << where << endl;
            for (match = 0; match < (int)cubes.size(); match++) {
                if (cubes[match].find(word[where]) == string::npos) continue;
                //cout << "match:" << match << endl;
                int next = cube_match[match];
                if (where == next) continue;
                if (next == -1) {
                    found = true;
                    break;
                }
                if (from[next] == -1) {
                    q.push(next);
                    from[next] = where;
                    //cout << "push:" << next << endl;
                }
            }
        }

        if (!found) return false;
        while (from[where] != where) {
            int tmp = word_match[where];
            word_match[where] = match;
            cube_match[match] = where;
            where = from[where];
            match = tmp;
        }

        word_match[where] = match;
        cube_match[match] = where;
        
        //cout << "word_match:" << endl;
        //for (int i = 0; i < (int) word.size(); i++)
            //cout << word_match[i] << " ";
        //cout << endl;
        //cout << "cube_match:" << endl;
        //for (int j = 0; j < (int)cubes.size(); j++)
            //cout << cube_match[j] << " ";
        //cout << endl;
            
        return true;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, vector <int> p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    PlayingCubes *obj;
    vector <int> answer;
    obj = new PlayingCubes();
    clock_t startTime = clock();
    answer = obj->composeWords(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p2.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p2[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p2.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p2[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;
    vector <int> p2;

    {
        // ----- test 0 -----
        string t0[] = {"ABCDEF","DEFGHI","OPQRST","ZZZZZZ","YYYYYY"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"CAT","DOG","PIZZA"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"ABCDEF","DEFGHI","OPQRST","MNZLSA","QEIOGH","IARJGS"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"DOG","CAT","MOUSE","BIRD","CHICKEN","PIG","ANIMAL"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {0,1,3,5};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"AAAAAA","AAAAAA","AAAAAA","AAAAAA"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"AA","AAA","AAAA","AAAAA","AAAAAA"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {0,1,2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"ABCDEF","DEFGHI","OPQRST","ZZZZZZ","ZZZZZZ"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"CAT","DOG","PIZZA"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
