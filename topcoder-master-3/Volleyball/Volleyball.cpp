
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

double memo[1000][1000];

double go(int ss, int rs, double p) {
    if (ss >= 1000 || rs >= 1000) return 0.0;
    if (ss >= 15 && ss-rs >= 2) return 1.0;
    if (rs >= 15 && rs-ss >= 2) return 0.0;
    if (memo[ss][rs] > 0.0) return memo[ss][rs];
    memo[ss][rs] = p*go(ss+1, rs, p)+(1.0-p)*(1.0-go(rs+1, ss, p));
    return memo[ss][rs];
}

class Volleyball {
public:
    double win(int ss, int rs, double p) {
        for (int i = 0; i < 1000; i++)
            for (int j = 0; j < 1000; j++)
                memo[i][j] = -1.0;

        return go(ss, rs, p);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, double p2, bool hasAnswer, double p3) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
    cout << "]" << endl;
    Volleyball *obj;
    double answer;
    obj = new Volleyball();
    clock_t startTime = clock();
    answer = obj->win(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    double p2;
    double p3;

    {
        // ----- test 0 -----
        p0 = 13;
        p1 = 13;
        p2 = .5;
        p3 = 0.5;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 1;
        p1 = 14;
        p2 = 0.01;
        p3 = 3.355704697986578E-27;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 8;
        p1 = 12;
        p2 = 0.4;
        p3 = 0.046377890909090946;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 4;
        p1 = 3;
        p2 = 0.01;
        p3 = 0.6662085066547871;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
