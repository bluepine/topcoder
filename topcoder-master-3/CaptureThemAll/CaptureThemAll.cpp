#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int visited[8][8];
#define MAX 8*8

class CaptureThemAll {
public:
	int fastKnight(string knight, string rook, string queen) {
        int kr = fastKnightHelper(knight, rook);
        int rq = fastKnightHelper(rook, queen);
        int kq = fastKnightHelper(knight, queen);
        return min(kr+rq, kq+rq);
    }

    int fastKnightHelper(string & start, string & end) {
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 8; ++j)
                visited[i][j] = -1;
        queue<pair<int, int> > qs;
        int ci = start[0]-'a', cj = start[1]-'1';  
        qs.push(make_pair(ci, cj));
        visited[ci][cj] = 0;
        while (!qs.empty()) {
            pair<int, int> node = qs.front();
            qs.pop();
            ci = node.first, cj = node.second;
            //cout << ci << "," << cj << endl;
            int i, j;
            i = ci-2, j = cj-1;
            if (i >= 0 && i <= 7 && j >= 0 && j <= 7 && visited[i][j] == -1) {
                qs.push(make_pair(i, j));
                visited[i][j] = visited[ci][cj] + 1;
            }
            i = ci-2, j = cj+1;
            if (i >= 0 && i <= 7 && j >= 0 && j <= 7 && visited[i][j] == -1) {
                qs.push(make_pair(i, j));
                visited[i][j] = visited[ci][cj] + 1;
            }
            i = ci+2, j = cj-1;
            if (i >= 0 && i <= 7 && j >= 0 && j <= 7 && visited[i][j] == -1) {
                qs.push(make_pair(i, j));
                visited[i][j] = visited[ci][cj] + 1;
            }
            i = ci+2, j = cj+1;
            if (i >= 0 && i <= 7 && j >= 0 && j <= 7 && visited[i][j] == -1) {
                qs.push(make_pair(i, j));
                visited[i][j] = visited[ci][cj] + 1;
            }
            i = ci-1, j = cj-2;
            if (i >= 0 && i <= 7 && j >= 0 && j <= 7 && visited[i][j] == -1) {
                qs.push(make_pair(i, j));
                visited[i][j] = visited[ci][cj] + 1;
            }
            i = ci-1, j = cj+2;
            if (i >= 0 && i <= 7 && j >= 0 && j <= 7 && visited[i][j] == -1) {
                qs.push(make_pair(i, j));
                visited[i][j] = visited[ci][cj] + 1;
            }
            i = ci+1, j = cj-2;
            if (i >= 0 && i <= 7 && j >= 0 && j <= 7 && visited[i][j] == -1) {
                qs.push(make_pair(i, j));
                visited[i][j] = visited[ci][cj] + 1;
            }
            i = ci+1, j = cj+2;
            if (i >= 0 && i <= 7 && j >= 0 && j <= 7 && visited[i][j] == -1) {
                qs.push(make_pair(i, j));
                visited[i][j] = visited[ci][cj] + 1;
            }
            //for (int i = 0; i < 8; ++i) {
                //for (int j = 0; j < 8; ++j)
                    //cout << visited[i][j] << " ";
                //cout << endl;
            //}
            int v = visited[end[0]-'a'][end[1]-'1'];
            if (v != -1) return v;
        }
        return MAX;

    }

};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"";
    cout << "]" << endl;
    CaptureThemAll *obj;
    int answer;
    obj = new CaptureThemAll();
    clock_t startTime = clock();
    answer = obj->fastKnight(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    string p1;
    string p2;
    int p3;

    {
        // ----- test 0 -----
        p0 = "a1";
        p1 = "b3";
        p2 = "c5";
        p3 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "b1";
        p1 = "c3";
        p2 = "a3";
        p3 = 3;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "a1";
        p1 = "a2";
        p2 = "b2";
        p3 = 6;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "a5";
        p1 = "b7";
        p2 = "e4";
        p3 = 3;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "h8";
        p1 = "e2";
        p2 = "d2";
        p3 = 6;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
