#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int moves[16][2] =
{
    {-2, -1},
    {-1, -2},
    {-2, 1},
    {1, -2},
    {2, -1},
    {-1, 2},
    {2, 1},
    {1, 2},
    {-1, -1},
    {-1, 1},
    {1, -1},
    {1, 1},
    {0, -1},
    {-1, 0},
    {0, 1},
    {1, 0},
};

class ChessMetric {
public:
    long long howMany(int size, vector <int> start, vector <int> end, int numMoves) {
        long long dp1[128][128];
        long long dp2[128][128];
        long long (*p1)[128] = dp1, (*p2)[128] = dp2;

        for (int i = 0; i < size; i++)
            for (int j = 0; j < size; j++)
                p1[i][j] = 0;
        p1[start[0]][start[1]] = 1;

        while (numMoves > 0) {
            for (int x = 0; x < size; x++) {
                for (int y = 0; y < size; y++) {
                    for (int i = 0; i < 16; i++) {
                        int nx = x+moves[i][0], ny = y+moves[i][1];
                        long long sum = 0;
                        if (nx >= 0 && nx < size && ny >= 0 && ny < size)
                            sum += p1[x][y];
                        p2[nx][ny] = sum;
                    }
                }
            }
            swap(p1, p2);
            numMoves--;
        }
        //for (int x = 0; x < size; x++) {
        //    for (int y = 0; y < size; y++)
        //        cout << p1[x][y] << " ";
        //    cout << endl;
        //}

        return p1[end[0]][end[1]];
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, int p3, bool hasAnswer, long long p4) {
    cout << "Test " << testNum << ": [" << p0 << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << p3;
    cout << "]" << endl;
    ChessMetric *obj;
    long long answer;
    obj = new ChessMetric();
    clock_t startTime = clock();
    answer = obj->howMany(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p4 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p4;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    vector <int> p1;
    vector <int> p2;
    int p3;
    long long p4;

    {
        // ----- test 0 -----
        p0 = 3;
        int t1[] = {0,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 1;
        p4 = 1ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 3;
        int t1[] = {0,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 1;
        p4 = 1ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 3;
        int t1[] = {0,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {2,2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 1;
        p4 = 0ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 3;
        int t1[] = {0,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {0,0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        p4 = 5ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 100;
        int t1[] = {0,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {0,99};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 50;
        p4 = 243097320072600ll;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
