#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

using namespace std;

int N;

class DrivingAround {
public:
	int numberOfWays(vector<string> adj, int start, int finish, int time){
        int M = adj.size();
        N = 5*M;
        vector<vector<int> > ms(N, vector<int>(N, 0));
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < M; j++) {
                if (adj[i][j] == '.') continue;
                int r = (i+1)*5-1;
                int c = (j+1)*5-(adj[i][j]-'0');
                while (c <= (j+1)*5-1) {
                    ms[r][c] = 1;
                    r = c;
                    c++;
                }
            }
        }
        ms = pow(ms, time);
        int r = (start+1)*5-1;
        int c = (finish+1)*5-1;
        return ms[r][c];
    }

    vector<vector<int> > mul(vector<vector<int> > a, vector<vector<int> > b) {
        vector<vector<int> > c(N, vector<int>(N, 0));
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                for (int k = 0; k < N; k++) {
                    long long t = ((long long)a[i][k])*b[k][j]%1000003;
                    c[i][j] = (c[i][j]+t)%1000003;
                }
        return c;
    }

    vector<vector<int> > pow(vector<vector<int> > b, int e) {
        if (e == 0) {
            vector<vector<int> > r(N, vector<int>(N, 0));
            for (int i = 0; i < N; i++) r[i][i] = 1;
            return r;
        }
        if (e%2 == 1) return mul(b, pow(b, e-1));
        vector<vector<int> > t = pow(b, e/2);
        return mul(t, t);
    }
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	DrivingAround *obj;
	int answer;
	obj = new DrivingAround();
	clock_t startTime = clock();
	answer = obj->numberOfWays(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	string t0[] = {".12","2.1","12."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 2;
	p3 = 5;
	p4 = 8;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"....52....","..5.......","..........",".......1..","......42.2","5...4.....",".5...4...1","......5...",".3244.....",".........."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 2;
	p3 = 10;
	p4 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"...14....1","......13..",".2...4....","....52.5..","1.3..4....",".3....35.5","4......1.1","..4.4.1.54","....4.11.5","31144.2.4."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 2;
	p3 = 100;
	p4 = 316984;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
