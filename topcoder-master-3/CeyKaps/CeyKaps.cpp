#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class CeyKaps {
public:
	string decipher(string typed, vector <string> switches) {
	    char table[26];
        for (int i = 0; i < 26; i++)
            table[i] = 'A' + i;
        for (size_t i = 0; i < switches.size(); i++) {
            char* j1 = find(table, table+26, switches[i][0]);
            char* j2 = find(table, table+26, switches[i][2]);
            char tmp = *j2;
            *j2 = *j1;
            *j1 = tmp;
        }
        for (size_t i = 0; i < typed.size(); i++)
            typed[i] = table[typed[i]-'A'];
        return typed;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    CeyKaps *obj;
    string answer;
    obj = new CeyKaps();
    clock_t startTime = clock();
    answer = obj->decipher(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p2 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    vector <string> p1;
    string p2;

    {
        // ----- test 0 -----
        p0 = "AAAAA";
        string t1[] = {"A:B","B:C","A:D"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "CCCCC";
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "ABCDE";
        string t1[] = {"A:B","B:C","C:D","D:E","E:A"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "AEBCD";
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "IHWSIOTCHEDMYKEYCAPSARWUND";
        string t1[] = {"W:O","W:I"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "WHOSWITCHEDMYKEYCAPSAROUND";
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
