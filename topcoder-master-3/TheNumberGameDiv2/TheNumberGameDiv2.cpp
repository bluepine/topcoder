#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

using namespace std;

class TheNumberGameDiv2 {
public:
    int minimumMoves(int A, int B) {
        int res = INT_MAX;
        minimumMovesHelper(A, B, 0, res, false);
        if (res == INT_MAX)
            return -1;
        return res;
    }

    void minimumMovesHelper(int A, int B, int steps, int & res, bool reverse) {
        if (A == B) {
            res = min(res, steps);
            return;
        }

        if (!check(A, B))
            return;
        if (!reverse)
            minimumMovesHelper(rev(A), B, steps+1, res, true);
        minimumMovesHelper(A/10, B, steps+1, res, false);
    }

    bool check(int A, int B) {
        if (A == 0) return false;
        int table[10] = {0};
        int num = 0;
        while (A > 0) {
            table[A%10]++;
            A /= 10;
            num++;
        }
        while (B > 0) {
            table[B%10]--;
            B /= 10;
            num--;
        }

        if (num < 0) return false;
        for (int i = 1; i < 10; i++) {
            if (table[i] < 0)
                return false;
        }
        return true;
    }

    int rev(int x) {
        long long res = 0;
        while (x) {
            res = res * 10 + x % 10; 
            x /= 10; 
        }   
        return res;
    }   
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1;
    cout << "]" << endl;
    TheNumberGameDiv2 *obj;
    int answer;
    obj = new TheNumberGameDiv2();
    clock_t startTime = clock();
    answer = obj->minimumMoves(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = 25;
        p1 = 5;
        p2 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 5162;
        p1 = 16;
        p2 = 4;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 334;
        p1 = 12;
        p2 = -1;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 218181918;
        p1 = 9181;
        p2 = 6;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 9798147;
        p1 = 79817;
        p2 = -1;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
