#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ChessMatch {
public:
	double score[20][20];
    double memo[1<<20];
    int prev[20];

    double go(vector<int> & ta, vector<int> & tb, int n, int i, int k) {
        if (memo[i] != -1.0) return memo[i];
        double best = -1.0;
        for (int j = 0; j < n; j++) {
            if ((i&(1<<j))==0 || ((i&prev[j])!=0)) continue;
            double e = score[j][k];
            e += go(ta, tb, n, i&~(1<<j), k+1);
            if (e > best) best = e;
        }
        return memo[i]=best;
    }

	double bestExpectedScore(vector <int> teamA, vector <int> teamB, int lim) {
		int n = teamA.size();
        int N = 1<<n;

		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				score[i][j] = 1.0/(1.0+pow(10.0, (teamB[j]-teamA[i])/400.0));

        for (int i = 0; i < N; i++)
            memo[i] = -1.0;
        memo[0] = 0.0;

        for (int i = 0; i < n; i++) {
            prev[i] = 0;
            for (int j = 0; j < n; j++)
                if (teamA[i]+lim<teamA[j])
                    prev[i] |= (1<<j);
        }

        return go(teamA, teamB, n, N-1, 0);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	ChessMatch *obj;
	double answer;
	obj = new ChessMatch();
	clock_t startTime = clock();
	answer = obj->bestExpectedScore(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	double p3;
	
	{
	// ----- test 0 -----
	int t0[] = {2239,2412,2399,2267};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2534,2429,2340,2389};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 100;
	p3 = 1.4835736078879815;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2239,2412,2399,2267};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2534,2429,2340,2389};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 150;
	p3 = 1.5332458652994558;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2500,2503};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1500,1503};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 1.9936953816334797;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1786,2080,2156,2132,2187,2380,2191};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1885,1851,1743,1714,2338,2167,1789};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1500;
	p3 = 5.227676657319362;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1868,1797,2213,2085,1611,2002,2167,1908,1773,1834,1766,2245,1582,2009,2233,2030};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2138,2259,2109,2160,2295,2022,2043,2131,1655,1716,1648,1779,1518,1570,1560,1677};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 200;
	p3 = 9.229777079272512;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
