#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

bool memo[1025];

class BorelSets {
public:
	int howMany(int size, vector <string> subsets) {
		fill(begin(memo), end(memo), false);
		int N = (1<<size)-1; 
		set<int> b1;
		int res = 0;
		for (size_t i = 0; i < subsets.size(); i++) {
			istringstream is(subsets[i]);
			int num = 0, bit;
			while (is >> bit)
				num |= (1<<(bit-1));
			if (!memo[num]) {
				memo[num] = true;
				res += 1;
			}
		}

		int last;
		while (true) {
			last = res;
			for (int i = 0; i <= 1024; i++) {
				if (memo[i]) {
					int j = N-i;
					if (!memo[j]) {
						memo[j] = true;
						res += 1;
					}
				}
			}

			for (int i = 0; i <= 1024; i++) {
				for (int j = 0; j <= 1024; j++) {
					if (memo[i] && memo[j]) {
						int k = i | j;
						if (!memo[k]) {
							memo[k] = true;
							res += 1;
						}
					}
				}
			}

			if (last == res) break;
		}

		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BorelSets *obj;
	int answer;
	obj = new BorelSets();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <string> p1;
	int p2;

	{
		// ----- test 0 -----
		p0 = 4;
		string t1[] = {"1 2",""};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 4;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 10;
		string t1[] = {"","1","2","3","4","5","6","7","8","9","10"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 1024;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 5;
		string t1[] = {"","1 1 2","1 1 2 2 1 1","","2 1 1"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 5;
		string t1[] = {"","1 2","1 3"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 16;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
