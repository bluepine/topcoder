
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ShortPalindromes {
public:
    string shortest(string base) {
        int N = base.size();
        vector<vector<int> > dp(N, vector<int>(N, 0));
        vector<vector<int> > op(N, vector<int>(N, -1));
        for (int i = 0; i < N; i++) dp[i][i] = 1;

        for (int i = 0; i < N-1; i++) {
            if (base[i] == base[i+1]) {
                dp[i][i+1] = 2;
            }
            else {
                dp[i][i+1] = 3;
                op[i][i+1] = (base[i] > base[i+1]);
            }
        }

        for (int l = 3; l <= N; l++) {
            for (int s = 0; s < N-l+1; s++) {
                int e = s+l-1;
                if (base[s] == base[e]) {
                    dp[s][e] = dp[s+1][e-1]+2;
                }
                else if (dp[s][e-1] < dp[s+1][e]) {
                    dp[s][e] = dp[s][e-1]+2;
                    op[s][e] = 1;
                }
                else if (dp[s][e-1] > dp[s+1][e]) {
                    dp[s][e] = dp[s+1][e]+2;
                    op[s][e] = 0;
                }
                else if (base[s] > base[e]) {
                    dp[s][e] = dp[s][e-1]+2;
                    op[s][e] = 1;
                }
                else if (base[s] < base[e]) {
                    dp[s][e] = dp[s+1][e]+2;
                    op[s][e] = 0;
                }
            }
        }

  /*      for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                cout << dp[i][j] << " ";
            }
            cout << endl;
        }

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                cout << op[i][j] << " ";
            }
            cout << endl;
        }*/

        string res;
        int s = 0, e = N-1, l = 0;
        while (s < e) {
            if (op[s][e] == 0) {
                res.push_back(base[s]);
                s++, l++;
            }
            else if (op[s][e] == 1) {
                res.push_back(base[e]);
                e--, l++;
            }
            else {
                res.push_back(base[s]);
                s++, e--, l++;
            }
        }
        if (s == e) res.push_back(base[s]);

        for (int i = l-1; i >= 0; i--)
            res.push_back(res[i]);
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    ShortPalindromes *obj;
    string answer;
    obj = new ShortPalindromes();
    clock_t startTime = clock();
    answer = obj->shortest(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    string p1;

    {
        // ----- test 0 -----
        p0 = "RACE";
        p1 = "ECARACE";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "TOPCODER";
        p1 = "REDTOCPCOTDER";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "Q";
        p1 = "Q";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "MADAMIMADAM";
        p1 = "MADAMIMADAM";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "ALRCAGOEUAOEURGCOEUOOIGFA";
        p1 = "AFLRCAGIOEOUAEOCEGRURGECOEAUOEOIGACRLFA";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "EDD";
        p1 = "EDDE";
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
