#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int moves[][2] = {
    {-2, -1},
    {-1, -2},
    {1, -2},
    {-2, 1},
    {-1, 2},
    {2, -1},
    {1, 2},
    {2, 1}
};

class ChessKnight {
public:
    double probability(int x, int y, int n) {
        vector<vector<double> > dp1(8, vector<double>(8, 0.0));
        dp1[x-1][y-1] = 1.0;
        for (; n > 0; n--) {
            vector<vector<double> > dp2(8, vector<double>(8, 0.0));
            for (int x = 0; x < 8; x++) {
                for (int y = 0; y < 8; y++) {
                    for (int i = 0; i < 8; i++) {
                        int fx = x+moves[i][0];
                        int fy = y+moves[i][1];
                        if (fx < 0 || fx >= 8 || fy < 0 || fy >= 8 || dp1[fx][fy] == 0.0) continue;
                        dp2[x][y] += dp1[fx][fy]/8.0;
                    }
                }
            }
            dp1 = dp2;
        }

        double res = 0.0;
        for (int x = 0; x < 8; x++)
            for (int y = 0; y < 8; y++)
                res += dp1[x][y];
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
    cout << "]" << endl;
    ChessKnight *obj;
    double answer;
    obj = new ChessKnight();
    clock_t startTime = clock();
    answer = obj->probability(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    double p3;

    {
        // ----- test 0 -----
        p0 = 1;
        p1 = 1;
        p2 = 2;
        p3 = 0.1875;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 4;
        p1 = 4;
        p2 = 1;
        p3 = 1.0;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 2;
        p1 = 3;
        p2 = 10;
        p3 = 0.0522148497402668;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 4;
        p1 = 3;
        p2 = 50;
        p3 = 8.356427906809618E-7;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
