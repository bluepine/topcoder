
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

bool visited[10];

class Fifteen {
public:
    string outcome(vector <int> moves) {
        for (int i = 1; i < 10; i++)
            visited[i] = false;
        vector<int> p1, p2;
        for (int i = 0; i < (int)moves.size(); i++) {
            int m = moves[i];
            visited[m] = true;
            if (i%2) p2.push_back(m);
            else p1.push_back(m);
        }

        for (int i = 1; i < 10; i++) {
             if (!visited[i]) {
                visited[i] = true;
                p2.push_back(i);
                if (outcomeHelper(p1, p2)) {
                    ostringstream os;
                    os << "WIN " << i;
                    return os.str();
                }
                p2.pop_back();
                visited[i] = false;
            }
        }

        return "LOSE";
    }

    bool outcomeHelper(vector<int> p1, vector<int> p2) {
        if (win(p2)) return true;
        bool res = false;
        for (int i = 1; i < 10; i++) {
            if (!visited[i]) {
                visited[i] = true;
                p1.push_back(i);
                res |= outcomeHelper(p2, p1);
                p1.pop_back();
                visited[i] = false;
            }
        }
        return !res;
    }

    bool win(vector<int> & p) {
        int N = p.size();
        for (int i = 0; i < N-2; i++)
            for (int j = i+1; j < N-1; j++)
                for (int k = j+1; k < N; k++)
                    if (p[i]+p[j]+p[k] == 15)
                        return true;
        return false;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    Fifteen *obj;
    string answer;
    obj = new Fifteen();
    clock_t startTime = clock();
    answer = obj->outcome(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    string p1;

    {
        // ----- test 0 -----
        int t0[] = {7,5,9,6,8,1,2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "WIN 4";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {4,8,6,5,2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "LOSE";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {2,4,7,6,9,8,5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "WIN 1";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {9,2,1,6,3,4,8};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "WIN 5";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "LOSE";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {6,3,7,8,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "WIN 2";
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
