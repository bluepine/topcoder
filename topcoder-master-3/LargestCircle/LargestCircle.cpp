#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LargestCircle {
public:
	int radius(vector <string> grid) {
	    int M = grid.size();
        int N = grid[0].size();
        int dist[2][2];
        for (int r = min(M,N)/2; r > 0; --r) {
            for (int ox = r; ox <= M-r; ++ox) {
                for (int oy = r; oy <= N-r; ++oy) {
                    bool check = true;
                    for (int cx = 0; cx < M && check; ++cx) {
                        for (int cy = 0; cy < N && check; ++cy) {
                            if (grid[cx][cy] == '#') {
                            int dx = cx-ox;
                            int dy = cy-oy;
                            dist[0][0] = dx*dx+dy*dy-r*r;
                            dist[0][1] = dx*dx+(dy+1)*(dy+1)-r*r;
                            dist[1][0] = (dx+1)*(dx+1)+dy*dy-r*r;
                            dist[1][1] = (dx+1)*(dx+1)+(dy+1)*(dy+1)-r*r;
                            check = (dist[0][0] >= 0 && dist[0][1] >= 0 && dist[1][0] >= 0 && dist[1][1] >= 0) || (dist[0][0] <= 0 && dist[0][1] <= 0 && dist[1][0] <= 0 && dist[1][1] <= 0);
                            }
                        }
                    }
                    if (check) return r;
                }
            }
        }
        return 0;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    LargestCircle *obj;
    int answer;
    obj = new LargestCircle();
    clock_t startTime = clock();
    answer = obj->radius(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;

    {
        // ----- test 0 -----
        string t0[] = {"####","#..#","#..#","####"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"############","###......###","##.######.##","#.########.#","#.##..####.#","#.##..####.#","#.########.#","#.########.#","#.########.#","##.######.##","###......###","############"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 5;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {".........."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"#######","#######","#######","#######","#######"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"#####.......","#####.......","#####.......","............","............","............","............","............","............","............"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 4;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        string t0[] = {"#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.","...#...#...#...#...#...#...#...#...#...#...#...#..","#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.",".#...#...#...#...#...#...#...#...#...#...#...#...#","#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.","...#...#...#...#...#...#...#...#...#...#...#...#..","#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.",".#...#...#...#...#...#...#...#...#...#...#...#...#","#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.","...#...#...#...#...#...#...#...#...#...#...#...#.#","#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        string t0[] = {

};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 24;
        all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
