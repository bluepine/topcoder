#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

using namespace std;


class UnionOfIntervals {
public:
	int nthElement(vector<int> ls, vector<int> us, int n) {
        long long l = INT_MAX, u = INT_MIN;
        for (int i = 0; i < (int)ls.size(); i++) {
            if (ls[i] < l) l = ls[i];
            if (us[i] > u) u = us[i];
        }

        while (l <= u) {
            long long m = l+(u-l)/2;
            long long sm = 0, eq = 0;
            for (int i = 0; i < (int)ls.size(); i++) {
                if (ls[i] <= m && m <= us[i])
                    eq++, sm+=(m-ls[i]);
                else if (us[i] < m)
                    sm+=(us[i]-ls[i]+1);
            }

            if (sm+eq<=n) l=m+1;
            else if (sm>n) u=m-1;
            else return m;

        }
        return INT_MIN;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << p2;
    cout << "]" << endl;
    UnionOfIntervals *obj;
    int answer;
    obj = new UnionOfIntervals();
    clock_t startTime = clock();
    answer = obj->nthElement(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        int t0[] = {1,5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {3,7};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 4;
        p3 = 6;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {1,3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {4,5};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 3;
        p3 = 3;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {-1500000000};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1500000000};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1500000091;
        p3 = 91;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }
    
    {
        // ----- test 3 -----
        int t0[] = {-456, -82481, 484, 399};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {19342, 200, 8484, 1000};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 44444;
        p3 = -38037;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
