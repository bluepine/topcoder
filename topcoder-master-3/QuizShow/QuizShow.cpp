#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class QuizShow {
public:
	int wager(vector <int> scores, int wager1, int wager2) {
	    int res = 0, odd = 0, best = 0;
        for (int wager0 = scores[0]; wager0 >= 0; --wager0) {
            odd = 0;
            for (int i = -1; i <= 1; i += 2) {
                for (int j = -1; j <= 1; j += 2) {
                    for (int k = -1; k <= 1; k += 2) {
                        int score0 = scores[0]+i*wager0;
                        int score1 = scores[1]+j*wager1;
                        int score2 = scores[2]+k*wager2;
                        if (score0 > score1 && score0 > score2) {
                            odd++;
                            if (odd >= best) {
                                best = odd;
                                res = wager0;
                            }
                        }
                    }
                }
            }
        }

        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1 << "," << p2;
    cout << "]" << endl;
    QuizShow *obj;
    int answer;
    obj = new QuizShow();
    clock_t startTime = clock();
    answer = obj->wager(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        int t0[] = {100,100,100};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 25;
        p2 = 75;
        p3 = 76;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {10,50,60};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 30;
        p2 = 41;
        p3 = 0;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {10,50,60};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 31;
        p2 = 41;
        p3 = 10;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {2,2,12};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        p2 = 10;
        p3 = 1;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {10000,10000,10000};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 9998;
        p2 = 9997;
        p3 = 9999;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {5824,4952,6230};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 364;
        p2 = 287;
        p3 = 694;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
