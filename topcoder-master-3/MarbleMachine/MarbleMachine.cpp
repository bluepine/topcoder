#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>

using namespace std;

vector<string> ls;
vector<string> as;
int M;
int N;
int K;

class MarbleMachine {
public:
	long long maxMarbles(vector<string> layout, vector<string> actions, int t) {
		ls = layout;
		as = actions;
		M = layout.size();
		N = layout[0].size();
		K = M*N;
		vector<vector<long long> > cs(K+1, vector<long long>(K+1, 0));
		for (int i = 0; i < K; i++) cs[i][i] = 1;

		if (t >= 60) {
			for (int s = 0; s < 60; s++)
				cs = go(cs, s);
			cs = pow(cs, t/60);
		}

		t %= 60;
		for (int s = 0; s < t; s++) cs = go(cs, s);

		long long res = 0;
		for (int i = 0; i < K; i++)
			res = max(res, cs[i][K]);
		return res;
	}

	vector<vector<long long> > pow(vector<vector<long long> > & b, int e) {
		if (e == 0) {
			vector<vector<long long> > res(K+1, vector<long long>(K+1, 0));
			for (int i = 0; i <= K; i++) res[i][i] = 1;
			return res;
		}
		if (e%2 == 1) return mul(b, pow(b, e-1));
		vector<vector<long long> > t = pow(b, e/2);
		return mul(t, t);
	}

	vector<vector<long long> > mul(vector<vector<long long> > a, vector<vector<long long> > b) {
		vector<vector<long long> > c(K+1, vector<long long>(K+1, 0));
		for (int i = 0; i <= K; i++) {
			for (int j = 0; j <= K; j++) {
				for (int k = 0; k <= K; k++) {
					c[i][j] += a[i][k]*b[k][j]; 
				}
			}
		}
		return c;
	}

	vector<vector<long long> > go(vector<vector<long long> > & cs, int step) {
		vector<vector<long long> > ns(K+1, vector<long long>(K+1, 0));
		for (int i = 0; i < K; i++) {
			int r = i/N;
			int c = i%N;
			int l = ls[i/N][i%N]-'0';
			char a = as[l][step%as[l].size()];
			switch (a) {
			case 'D':
				break;
			case 'N':
				if (r > 0) {
					ns[i-N][K] += cs[i][K];
					for (int j = 0; j < K; j++)
						if (cs[i][j]) ns[i-N][j] = 1;
				}
				break;
			case 'S':
				if (r < M-1) {
					ns[i+N][K] += cs[i][K];
					for (int j = 0; j < K; j++)
						if (cs[i][j]) ns[i+N][j] = 1;
				}
				break;
			case 'W':
				if (c > 0) {
					ns[i-1][K] += cs[i][K];
					for (int j = 0; j < K; j++)
						if (cs[i][j]) ns[i-1][j] = 1;
				}
				break;
			case 'E':
				if (c < N-1) {
					ns[i+1][K] += cs[i][K];
					for (int j = 0; j < K; j++)
						if (cs[i][j]) ns[i+1][j] = 1;
				}
				break;
			default:
				ns[i][K] += cs[i][K];
				ns[i][K] += a-'0';
				for (int j = 0; j < K; j++)
					if (cs[i][j]) ns[i][j] = 1;
				break;
			}
		}
		ns[K][K] = 1;
		return ns;
	}

	void dump(vector<vector<long long> > & cs) {
		for (int i = 0; i <= K; i++) {
			for (int j = 0; j <= K; j++)
				cout << setw(3) << cs[i][j];
			cout << endl;
		}
		cout << endl;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, int p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	MarbleMachine *obj;
	long long answer;
	obj = new MarbleMachine();
	clock_t startTime = clock();
	answer = obj->maxMarbles(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;
	int p2;
	long long p3;

	{
		// ----- test 0 -----
		string t0[] = {"0101","1010","0101"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"4","5353"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 5;
		p3 = 21ll;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"011112"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"1E","E","0"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 1000;
		p3 = 498ll;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"01","32"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"1E","SSDSS","W","00000W"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 23;
		p3 = 3ll;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
