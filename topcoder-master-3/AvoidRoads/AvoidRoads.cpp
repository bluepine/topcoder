#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

vector<vector<int> > bs;

class AvoidRoads {
public:
	long long numWays(int w, int h, vector <string> bad) {
        bs.clear();
        for (int i = 0; i < (int)bad.size(); i++) {
            vector<int> b;
            istringstream is(bad[i]);
            int n;
            while (is >> n)
                b.push_back(n);
            bs.push_back(b);
        }
       
        long long dp[128][128];
        dp[0][0] = 1;
        for (int i = 0; i <= h; i++) {
            for (int j = 0; j <= w; j++) {
                if (i == 0 && j == 0) continue;
                dp[i][j] = 0;
                if (i > 0 && check(j, i-1, j, i))
                    dp[i][j] += dp[i-1][j];
                if (j > 0 && check(j-1, i, j, i))
                    dp[i][j] += dp[i][j-1];
            }
        }
        
        //for (int i = 0; i <= h; i++) {
            //for (int j = 0; j <= w; j++)
                //cout << dp[i][j] << " ";
            //cout << endl;
        //}
        return dp[h][w];
    }
    
    bool check(int cx, int cy, int nx, int ny) {
        for (int i = 0; i < (int)bs.size(); i++) {
            if ((cx == bs[i][0] && cy == bs[i][1] && nx == bs[i][2] && ny == bs[i][3]) || (nx == bs[i][0] && ny == bs[i][1] && cx == bs[i][2] && cy == bs[i][3]))
                return false;
        }
        return true;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <string> p2, bool hasAnswer, long long p3) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p2[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    AvoidRoads *obj;
    long long answer;
    obj = new AvoidRoads();
    clock_t startTime = clock();
    answer = obj->numWays(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector <string> p2;
    long long p3;

    {
        // ----- test 0 -----
        p0 = 6;
        p1 = 6;
        string t2[] = {"0 0 0 1","6 6 5 6"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 252ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 1;
        p1 = 1;
        p2.clear() /*{}*/;
        p3 = 2ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 35;
        p1 = 31;
        p2.clear() /*{}*/;
        p3 = 6406484391866534976ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 2;
        p1 = 2;
        string t2[] = {"0 0 1 0","1 2 2 2","1 1 2 1"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 0ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 9;
        p1 = 100;
        string t2[] = {"0 2 0 3", "1 2 1 3", "2 2 2 3", "3 2 3 3", "4 2 4 3", "5 2 5 3", "6 2 6 3", "7 2 7 3", "8 2 8 3", "9 2 9 3"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 0ll;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
