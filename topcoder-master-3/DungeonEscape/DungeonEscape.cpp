#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

using namespace std;

int dist[50][50];

struct order {
    bool operator() (const int x, const int y) const {
        return make_pair(dist[x/50][x%50], x) < make_pair(dist[y/50][y%50], y);
    }
};

class DungeonEscape {
public:
    int exitTime(vector <string> up, vector <string> down, vector <string> east, vector <string> west, int startLevel, int startEasting) {
        int M = up.size();
        int N = up[0].size();
        //cout << "M: " << M << " N: " << N << endl;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                dist[i][j] = N*(M-i);
                //cout << dist[i][j] << " ";
            }
            //cout << endl;
        }

        int res = INT_MAX;
        set<int, order> qs;
        qs.insert(startLevel*50+startEasting);
        dist[startLevel][startEasting] = 0;
        while (!qs.empty()) {
            int w = *qs.begin();
            qs.erase(qs.begin());
            int r = w/50;
            int c = w%50;
            int t = dist[r][c];

            //cout << "[" << r << "," << c << "] " << " ";
            //cout << "up: " << up[r][c] << " ";
            //cout << "down: " << down[r][c] << " ";
            //cout << "west: " << west[r][c] << " ";
            //cout << "east: " << east[r][c] << " ";
            //cout << "time: " << t << endl;
            if (r >= 0 && up[r][c] != 'x') {
                int nr = r-1, nc = c, nt = t;
                nt += (up[r][c]-'0');
                if (nr == -1) {
                    if (nt < res) res = nt;
                }
                else if (nt < dist[nr][nc]) {
                    int nw = nr*50+nc;
                    if (qs.count(nw)) qs.erase(nw);
                    dist[nr][nc] = nt;
                    qs.insert(nw);
                } 
            }

            if (r < M-1 && down[r][c] != 'x') {
                int nr = r+1, nc = c, nt = t;
                nt += (down[r][c]-'0');
                if (nt < dist[nr][nc]) {
                    int nw = nr*50+nc;
                    if (qs.count(nw)) qs.erase(nw);
                    dist[nr][nc] = nt;
                    qs.insert(nw);
                } 
            }


            if (c > 0 && west[r][c] != 'x') {
                int nr = r, nc = c-1, nt = t;
                nt += (west[r][c]-'0');
                if (nt < dist[nr][nc]) {
                    int nw = nr*50+nc;
                    if (qs.count(nw)) qs.erase(nw);
                    dist[nr][nc] = nt;
                    qs.insert(nw);
                }
            }

            if (c < N-1 && east[r][c] != 'x') {
                int nr = r, nc = c+1, nt = t;
                nt += (east[r][c]-'0');
                if (nt < dist[nr][nc]) {
                    int nw = nr*50+nc;
                    if (qs.count(nw)) qs.erase(nw);
                    dist[nr][nc] = nt;
                    qs.insert(nw);
                }
            }
        }

        return (res==INT_MAX)?-1:res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, vector <string> p3, int p4, int p5, bool hasAnswer, int p6) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p2[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p3.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p3[i] << "\"";
    }
    cout << "}" << "," << p4 << "," << p5;
    cout << "]" << endl;
    DungeonEscape *obj;
    int answer;
    obj = new DungeonEscape();
    clock_t startTime = clock();
    answer = obj->exitTime(p0, p1, p2, p3, p4, p5);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p6 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p6;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;
    vector <string> p2;
    vector <string> p3;
    int p4;
    int p5;
    int p6;

    {
        // ----- test 0 -----
        string t0[] = {"0x4","0x3","0x3"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0x9","009","0x9"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"0x9","1x9","009"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"0x9","0x0","009"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 2;
        p5 = 2;
        p6 = 10;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"xxxxxxxxx1","1xxxxxxxxx","xxxxxxxxx1"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"xxxxxxxxxx","xxxxxxxxxx","xxxxxxxxxx"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"1111111111","xxxxxxxxxx","1111111111"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"xxxxxxxxxx","1111111111","xxxxxxxxxx"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 2;
        p5 = 0;
        p6 = 30;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"xxxxxxxxx1","xxxx999991","x999999991"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"1111111111","1111111111","1111111111"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"1111122242","2222222241","2111111111"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"xxxxxxxxx1","1111111111","xxxxxxxxx1"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 2;
        p5 = 0;
        p6 = -1;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"1x2x3x4x5x6x7x8x9","00000000000000000","98765432223456789","12345678987654321"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"00000000000000000","00000000000000000","00000000000000000","00000000000000000"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"xxxxxxxxxxxxxxxxx","xxxxxxxxxxxxxxxxx","22222222222222222","33333333333333333"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"xxxxxxxxxxxxxxxxx","xxxxxxxxxxxxxxxxx","22222222222222222","33333333333333333"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 3;
        p5 = 12;
        p6 = 17;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"326578x37664x22820303x4", "998xxx3x6xx10x7816897x3", "8xx0xx32244966xx32x7x3x", "x21370688254667xx0916x7", "0xxx7x464x4x835093x065x", "xxx76490x41xx0640x52x67", "8xxxxx0xx59xx3829765731", "x81724398x54x86x0695x34", "17xx75680xx93839234x675", "3x6x8xx187x19x49x24xx9x", "9x4x51x66xxx66xxxx15xx4"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"1x0116966x0x490389x87x3", "46x12xx560273407028x4xx", "57348x968x48xxx8x49xx52", "0xx38x84xxxx37x1xxx356x", "x0054x7x324x886x8x645x0", "4x81xxx9951981x23927495", "2xxxx83xxx58342xx58xx94", "5328xxxx196235x267x3815", "965x5855x1x82x88x2302x6", "7607xx4683x559440xxx9x0", "xxx56xx7242x12x53794x10"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"919257x0x18xx2992x9xxxx", "2477229x4xxx1x540x2xx8x", "19xx83x9918x1xxx16x2784", "199x0x291589x632179xx89", "7x5xx35xxxx4xxxx2xx21x2", "x127x7xx03x8360244x6x86", "x61xx2x74x7x6439953x69x", "xx35x44x56xxxxx4207x700", "9828xx305901x74x4x88739", "097x730727x783700xx10x1", "85088x759x0x4x164x7138x"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"4x3193xx314x57xxxxxx285", "xx2408x5235x8x8x1x57611", "7x17x716x1xx77xx9xxx3xx", "1xxx509829x22xx8197019x", "x9x57xx1x1x9587809x96x2", "384x2x4324x4x60xx8707xx", "856651x20x4x790367x359x", "40xx7x38xxxx9201x0x4725", "8934x92x68042x4583897xx", "94x426x890x80xxx59990x7", "072583042x89290xxxx1xx3"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 10;
        p5 = 0;
        p6 = 81;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
