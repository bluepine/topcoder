#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

using namespace std;

class Rationalization {
public:
	int minTweaks(vector <int> weights, vector <string> scores, int desired) {
        int M = scores.size();
        int N = weights.size();
       
        vector<vector<int> > ss(M, vector<int>(N, 0));
        for (int i = 0; i < M; i++) 
            for (int j = 0; j < N; j++)
                ss[i][j] = scores[i][j]-'0';

        int res = INT_MAX;
        go(weights, ss, desired, 0, 0, res);
        return (res == INT_MAX)?-1:res;
	}

    void go(vector<int> & ws, vector<vector<int> > & ss, int d, int j, int s, int & res) {
        int N = ws.size();
        if (j == N) {
            calc(ws, ss, d, s, res);   
            return;
        }

        go(ws, ss, d, j+1, s, res);
      
        ws[j] -= 1;
        if (ws[j] != 0) go(ws, ss, d, j+1, s+1, res);
        
        ws[j] += 2;
        if (ws[j] != 10) go(ws, ss, d, j+1, s+1, res);
        
        ws[j] -= 1;
    }

    void calc(vector<int> ws, vector<vector<int> > ss, int d, int s, int & res) {
        int M = ss.size();
        int N = ws.size();

        for (int k = 0; k < N; k++) {
            for (int j = 1; j < N; j++) {
                if (ws[j-1] < ws[j]) {
                    swap(ws[j-1], ws[j]);
                    for (int i = 0; i < M; i++)
                        swap(ss[i][j-1], ss[i][j]);
                }
            }
        }

        vector<int> ts(M, 0);
        for (int i = 0; i < M; i++)
            for (int j = 0; j < N; j++)
                ts[i] += ws[j]*ss[i][j];

        check(ws, ss, ts, d, s, res);

        for (int j = 0; j < N; j++) {
            if (ss[d][j] != 9) {
                ts[d] += ws[j];
                s += 1;
                check(ws, ss, ts, d, s, res);
            }
        }
    }

    void check(vector<int> & ws, vector<vector<int> > & ss, vector<int> & ts, int d, int s, int & res) {
        int M = ss.size();
        int N = ws.size();
        for (int i = 0; i < M; i++) {
            if (i == d || ts[d] > ts[i]) continue;
            int is = ts[i];
            for (int j = 0; j < N; j++) { 
                if (ts[d] <= is && ss[i][j] != 1) {
                    is -= ws[j];
                    s += 1;
                }
            }
            if (ts[d] <= is) return;
        }

        if (s < res) {
            res = s;
        }
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, int p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}" << "," << p2;
    cout << "]" << endl;
    Rationalization *obj;
    int answer;
    obj = new Rationalization();
    clock_t startTime = clock();
    answer = obj->minTweaks(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <string> p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        int t0[] = {3,2,1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"6354","5532","4626"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 2;
        p3 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {3,2,1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"6354","5532","4626"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1;
        p3 = 2;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {3,2,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"555","333"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1;
        p3 = -1;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {1,2,3,3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"9234","1334"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1;
        p3 = 3;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {8,2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"55","92"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 0;
        p3 = 6;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {2,8,7,3,6,5,2,4,7,2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"9197287893","9492555365","3459972761","4886112198","5963616776","6325897129","3248793133","7984474438","4518544769","1592681682"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 5;
        p3 = 17;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
