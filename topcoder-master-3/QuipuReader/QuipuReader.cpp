#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class QuipuReader {
public:
	vector <int> readKnots(vector <string> knots) {
	    int M = knots.size();
        int N = knots[0].size();
        
        vector<bool> t1(N, true);
        for (int j = 0; j < N; ++j) {
            for (int i = 0; i < M; ++i) {
                if (knots[i][j] == 'X') {
                    t1[j] = false;
                    break; 
                }
            }
        }

        //for (int j = 0; j < N; ++j)
            //cout << t1[j] << " ";
        //cout << endl;

        vector<bool> t2(N, true);
        t2[0] = false;
        for (int j = 1; j < N; ++j) {
            if (t1[j]) {
                t2[j] = false;
                continue;
            }
            for (int i = 0; i < M; ++i) {
                if (knots[i][j] == 'X' && knots[i][j-1] == 'X') {
                    t2[j] = false;
                    break; 
                }
            }
        }

        //for (int j = 0; j < N; ++j)
            //cout << t2[j] << " ";
        //cout << endl;
        
        vector<int> res(M, 0);
        vector<int> ds(M, 0);
        for (int j = 0; j < N; ++j) {
            for (int i = 0; i < M; ++i) {
                if (t2[j]) {
                    res[i] = 10*res[i]+ds[i];
                    ds[i] = 0;
                }
                if (knots[i][j] == 'X')
                    ++ds[i];
            }
        }
       
        for (int i = 0; i < M; ++i) {
            res[i] = 10*res[i]+ds[i];
            ds[i] = 0;
        }
        return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	QuipuReader *obj;
	vector <int> answer;
	obj = new QuipuReader();
	clock_t startTime = clock();
	answer = obj->readKnots(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"-XXXXXXX--XX-----XXXXX---","---XX----XXX-----XXXX----","-XXXXX---XXXXX--XXXXXXXX-"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {725,234,558};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
    {
    // ----- test 1 -----
    string t0[] = {"XX---XXXX","XXX-----X"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {24,31};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    string t0[] = {"-XXX---XX----X","--X----X-XXXXX","-XX--XXXX---XX"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {321,115,242};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    string t0[] = {"-------X--------","--XXX----XXXX---","--------------XX"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {100,3040,2};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    string t0[] = {"--XXX-XXXXXXXX----------XXXXXXXXX--XXXXXXXX-","--XX----XXXX-----XXXXXX---XXX------XXXXXXXX-","--------------------X----XXXXXXXX--XXXXXXXX-","--XX-------X------XXXX----XXX-------XXXXXX--","--XXX---XXXXX-------X------XX--------X------","-XXXX--XXXXXXX-----------XXXXXXX----XXXXX---","-----------X---XXXXXXXX----XX--------XXX----","-----------X---XXXXXXXX----X----------------","---X--XXXXXXXX--XXXXXXX---XXX---------------","--XX---XXXXXXX--XXXXXXX----XX-------XXXXX---"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {38098,24638,188,21436,35121,47075,1823,1810,18730,27725};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 5 -----
    string t0[] = {"X","-"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {1,0};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------
    }
    
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
