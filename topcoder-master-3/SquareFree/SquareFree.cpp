#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

using namespace std;

#define MAX 50000
bool prime[MAX];

class SquareFree {
public:
    int getNumber(int n) {
        for (int i = 2; i < MAX; i++) prime[i] = true;
        for (int i = 2; i*i < MAX; i++)
            if (prime[i])
                for (int j = i*i; j < MAX; j += i) prime[j] = false;
        vector<int> ps;
        for (int i = 2; i < MAX; i++)
            if (prime[i]) ps.push_back(i);

        int lo = n, hi = INT_MAX;
        while (lo < hi) {
            int mid = lo+(hi-lo)/2;
            int num = mid;
            go(ps, 0, mid, 1, -1, num);
            num = mid-num;
            if (num < n) lo = mid+1;
            else hi = mid;
        }
        return lo;
    };

    void go(vector<int> & ps, int i, int n, int k, int s, int & res) {
        res += n/k*s;
        while (i < (int)ps.size()) {
            int p = ps[i]*ps[i];
            if (n/p < k) break;
            go(ps, ++i, n, k*p, -1*s, res);
        } 
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << p0;
    cout << "]" << endl;
    SquareFree *obj;
    int answer;
    obj = new SquareFree();
    clock_t startTime = clock();
    answer = obj->getNumber(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer) {
        cout << "Match :-)" << endl;
    }
    else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;

    {
        // ----- test 0 -----
        p0 = 1;
        p1 = 1;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 13;
        p1 = 19;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 100;
        p1 = 163;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 1234567;
        p1 = 2030745;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 1000000000;
        p1 = 1644934081;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
