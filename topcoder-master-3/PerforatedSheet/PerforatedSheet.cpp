#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class PerforatedSheet {
public:
    vector <double> getCenterOfMass(int sheetWidth, int sheetHeight, vector <int> x, vector <int> y, vector <int> width, vector <int> height) {
        long long sum = (long long)sheetWidth*sheetHeight;
        vector<long long> tmp;
        tmp.push_back(sum*sheetWidth);
        tmp.push_back(sum*sheetHeight);
        for (int i = 0; i < (int)x.size(); i++) {
            long long w = (long long)width[i]*height[i];
            tmp[0] -= (2*x[i]+width[i])*w;
            tmp[1] -= (2*y[i]+height[i])*w;
            sum -= w;
        }

        vector<double> res;
        if (sum == 0) return res;
        res.push_back((double)tmp[0]/sum/2);
        res.push_back((double)tmp[1]/sum/2);
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, vector <int> p4, vector <int> p5, bool hasAnswer, vector <double> p6) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p3.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p3[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p4.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p4[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p5.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p5[i];
    }
    cout << "}";
    cout << "]" << endl;
    PerforatedSheet *obj;
    vector <double> answer;
    obj = new PerforatedSheet();
    clock_t startTime = clock();
    answer = obj->getCenterOfMass(p0, p1, p2, p3, p4, p5);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p6.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p6[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p6.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != answer[i] || fabs(p6[i] - answer[i]) > 1e-9 * max(1.0, fabs(p6[i]))) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector <int> p2;
    vector <int> p3;
    vector <int> p4;
    vector <int> p5;
    vector <double> p6;

    {
    // ----- test 0 -----
    p0 = 5;
    p1 = 10;
    p2.clear() /*{}*/;
    p3.clear() /*{}*/;
    p4.clear() /*{}*/;
    p5.clear() /*{}*/;
    double t6[] = {2.5,5.0};
    		p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
    // ------------------
    }
    
    {
    // ----- test 1 -----
    p0 = 10;
    p1 = 5;
    int t2[] = {0,1};
    		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    int t3[] = {0,0};
    		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
    int t4[] = {1,9};
    		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
    int t5[] = {5,1};
    		p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
    double t6[] = {5.5,3.0};
    		p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    p0 = 5;
    p1 = 5;
    int t2[] = {1};
    		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    int t3[] = {1};
    		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
    int t4[] = {1};
    		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
    int t5[] = {1};
    		p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
    double t6[] = {2.5416666666666665,2.5416666666666665};
    		p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    p0 = 822741;
    p1 = 110524;
    int t2[] = {335076,665632,210102,714135,229942,149776,675634,502085,393066,115215,80993,272343,434287,593760,589713,485801,395389,755380,417327,477023};
    		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    int t3[] = {104509,23182,103471,62180,5040,10186,45286,107985,36936,87885,63846,58794,89480,85195,64703,96341,89224,7727,71438,39128};
    		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
    int t4[] = {24578,20552,3332,254,21489,21158,35061,37453,21881,216,32930,31555,5121,36687,6949,3512,8049,30019,37252,8001};
    		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
    int t5[] = {2240,3152,4625,3508,4206,5262,1750,627,3983,3192,3609,3361,1135,2580,4158,1356,583,5408,5521,2742};
    		p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
    double t6[] = {411084.49564976187,55331.97175632337};
    		p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    p0 = 1234567;
    p1 = 314159;
    int t2[] = {0};
    		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    int t3[] = {0};
    		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
    int t4[] = {1234567};
    		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
    int t5[] = {314159};
    		p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
    p6.clear() /*{}*/;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
    // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 2000000;
        p1 = 2000000;
        int t2[] = {1,0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {0,1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        int t4[] = {1999999,1};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {2000000,1999999};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        double t6[] = {0.5,0.5};
        p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
