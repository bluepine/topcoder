#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

bool visited[50];
int N;

class CityLink {
public:
	int timeTaken(vector <int> x, vector <int> y) {
        N = x.size();
        if (N == 1) return 0;
	    int lower = 1, upper = 2000000;
        while (lower+1<upper) {
            int mid = (lower+upper)/2;
            int res = check(mid, x, y);
            //cout << "d: " << mid << " res: " << res << endl; 
            if (res) upper = mid;
            else lower = mid;
        }
        return check(lower, x, y)?lower:upper;
    }

    bool check(int d, vector<int> & x, vector<int> & y) {
        for (int i = 0; i < N; i++)
            visited[i] = false;
        dfs(0, d, x, y);
        for (int i = 0; i < N; i++)
            if (!visited[i])
                return false;
        return true;
    }

    void dfs(int i, int d, vector<int> & x, vector<int> & y) {
        visited[i] = true;
        for (int j = 0; j < N; j++) {
            if (visited[j]) continue;
            if (dist(i, j, x, y) > d) continue;
            dfs(j, d, x, y);
        }
    }

    int dist(int i, int j, vector<int> & x, vector<int> & y) {
        if (x[i] == x[j]) return (abs(y[i]-y[j])+1)/2;
        if (y[i] == y[j]) return (abs(x[i]-x[j])+1)/2;
        return max(abs(x[i]-x[j]),abs(y[i]-y[j]));
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	CityLink *obj;
	int answer;
	obj = new CityLink();
	clock_t startTime = clock();
	answer = obj->timeTaken(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
    {
    // ----- test 0 -----
    int t0[] = {0,5};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {0,5};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 5;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 1 -----
    int t0[] = {0,0};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {30,-59};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 45;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    int t0[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 1;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    int t0[] = {100000};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {-1000000};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 0;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    int t0[] = {1593,-88517,14301,3200,6,-15099,3200,5881,-2593,11,57361,-92990};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {99531,-17742,-36499,1582,46,34001,-19234,1883,36001,0,233,485};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 73418;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
