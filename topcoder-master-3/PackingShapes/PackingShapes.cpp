#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class PackingShapes {
public:
    bool check(int w, int h, int x, int y) {
        if (x <= w && y <= h) return true;
        if (x*x+y*y > w*w+h*h) return false;
        double l = 0.0, u = atan(1)*2;
        for (int i = 0; i < 100; i++) {
            double m = l+(u-l)/2;
            if (cos(m)*x+sin(m)*y < w) u=m;
            else l=m;
        }
        return (cos(u)*x+sin(u)*y < w+1e-9) && (sin(u)*x+cos(u)*y < h+1e-9);
    }

    vector<string> tryToFit(int w, int h, vector<string> ss) {
        vector<string> res;
        for (int i = 0; i < (int)ss.size(); i++) {
            istringstream is(ss[i]);
            string t;
            is >> t;
            if (t == "CIRCLE") {
                int r;
                is >> r;
                if (2*r <= min(w,h)) res.push_back("YES");
                else res.push_back("NO");
            }
            else {
                int x, y;
                is >> x >> y;
                if (check(max(w, h), min(w, h), max(x, y), min(x, y)))
                    res.push_back("YES");
                else
                    res.push_back("NO");
            }
        }

        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <string> p2, bool hasAnswer, vector <string> p3) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p2[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    PackingShapes *obj;
    vector <string> answer;
    obj = new PackingShapes();
    clock_t startTime = clock();
    answer = obj->tryToFit(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p3.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << "\"" << p3[i] << "\"";
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << answer[i] << "\"";
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p3.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p3[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector <string> p2;
    vector <string> p3;

    {
        // ----- test 0 -----
        p0 = 100;
        p1 = 100;
        string t2[] = {"RECTANGLE 3 3","RECTANGLE 3 230","RECTANGLE 140 1"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"YES","NO","YES"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 10;
        p1 = 100;
        string t2[] = {"RECTANGLE 99 9","CIRCLE 22"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"YES","NO"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 170;
        p1 = 900;
        string t2[] = {"RECTANGLE 200 700","RECTANGLE 3 910","RECTANGLE 1000 7","CIRCLE 5","CIRCLE 50","CIRCLE 500","RECTANGLE 1000 99"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"NO","YES","NO","YES","YES","NO","NO"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        //----- test 4 -----
        p0 = 535;
        p1 = 552;
        string t2[] = {"RECTANGLE 577 192"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"NO"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        //------------------
    }

    {
        //----- test 5 -----
        p0 = 83;
        p1 = 64;
        string t2[] = {"RECTANGLE 5 100"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"YES"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        //------------------
    }


    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
