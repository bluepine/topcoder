#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>

using namespace std;

int ts[262144];

class FloatingMedian {
public:
    long long sumOfMedians(int seed, int mul, int add, int N, int K) {
        return sumOfMedians2(seed, mul, add, N, K);
    }

    long long sumOfMedians1(int seed, int mul, int add, int N, int K) {
        vector<int> vs(N, 0);
        for (int i = 0; i < N; i++) {
            if (i == 0) vs[i] = seed;
            else vs[i] = (((long long)vs[i-1])*mul%65536+add)%65536;
        }

        long long res = 0ll;
        if (K == 1) {
            for (int i = 0; i < N; i++) res += vs[i];
            return res;
        }

        multiset<int> ls, rs;
        for (int i = 0; i < N; i++) {
            if (ls.empty() || vs[i] <= *ls.rbegin()) ls.insert(vs[i]);
            else rs.insert(vs[i]);

            if (i >= K) {
                if (ls.find(vs[i-K]) != ls.end()) ls.erase(ls.find(vs[i-K]));
                else rs.erase(rs.find(vs[i-K]));
            }

            while ((int)ls.size() > (K+1)/2) {
                rs.insert(*ls.rbegin());
                ls.erase(ls.find(*ls.rbegin()));
            };

            while ((int)rs.size() > K/2) {
                ls.insert(*rs.begin());
                rs.erase(rs.find(*rs.begin()));
            };

            if (i >= K-1) res += *ls.rbegin();
        }

        return res;
    }

    long long sumOfMedians2(int seed, int mul, int add, int N, int K) {
        vector<int> vs(N, 0);
        for (int i = 0; i < N; i++) {
            if (i == 0) vs[i] = seed;
            else vs[i] = (((long long)vs[i-1])*mul%65536+add)%65536;
        }

        memset(ts, 0, sizeof(ts));
        long long res = 0ll;
        for (int i = 0; i < N; i++) {
            update(1, 0, 65536, vs[i], 1);
            if (i >= K) update(1, 0, 65536, vs[i-K], -1);
            if (i >= K-1) res += query(1, 0, 65536, (K+1)/2);
        }

        return res;
    }

    void update(int node, int lo, int hi, int idx, int val) {
        ts[node] += val;   
        if (lo == hi) return;
        int mid = lo+(hi-lo)/2;
        if (lo <= idx && idx <= mid) update(2*node, lo, mid, idx, val);
        if (mid+1 <= idx && idx <= hi) update(2*node+1, mid+1, hi, idx, val);
    }

    int query(int node, int lo, int hi, int size) {
        if (lo == hi) return hi;
        int mid = lo+(hi-lo)/2;
        if(ts[2*node] < size) return query(2*node+1, mid+1, hi, size-ts[2*node]);
        return query(2*node, lo, mid, size);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, long long p5) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
    cout << "]" << endl;
    FloatingMedian *obj;
    long long answer;
    obj = new FloatingMedian();
    clock_t startTime = clock();
    answer = obj->sumOfMedians(p0, p1, p2, p3, p4);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p5 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p5;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;
    int p4;
    long long p5;

    {
        // ----- test 0 -----
        p0 = 3;
        p1 = 1;
        p2 = 1;
        p3 = 10;
        p4 = 3;
        p5 = 60ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 10;
        p1 = 0;
        p2 = 13;
        p3 = 5;
        p4 = 2;
        p5 = 49ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 4123;
        p1 = 2341;
        p2 = 1231;
        p3 = 7;
        p4 = 3;
        p5 = 102186ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 47;
        p1 = 5621;
        p2 = 1;
        p3 = 125000;
        p4 = 1700;
        p5 = 4040137193ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 32321;
        p1 = 46543;
        p2 = 32552;
        p3 = 17;
        p4 = 17;
        p5 = 25569ll;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 32312;
        p1 = 5621;
        p2 = 1;
        p3 = 250000;
        p4 = 1;
        p5 = 8188512824ll;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        p0 = 32321;
        p1 = 46543;
        p2 = 32552;
        p3 = 250000;
        p4 = 5000;
        p5 = 8028017305ll;
        all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
