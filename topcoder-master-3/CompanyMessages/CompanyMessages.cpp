#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

using namespace std;

class CompanyMessages {
public:
    int memo[1<<15];
    int prev[1<<15];

    int go(vector<string> & ms, int i) {
        if (memo[i] != INT_MAX) return memo[i];
        int n = ms.size();
        for (int j = 0; j < n; j++) {
            if ((i&(1<<j)) == 0) continue;
            int ps = go(ms, i&~(1<<j));
            for (int k = 0; k < n; k++)
                if ((i&(1<<k)) != 0)
                    ps += (ms[k][j]-'0');
            if (ps < memo[i]) {
                memo[i] = ps;
                prev[i] = j;
            }
        }
        return memo[i];
    }

    vector<int> getRank(vector<string> ms) {
        int n = ms.size();
        int N = 1<<n;

        memo[0] = 0;
        for (int i = 1; i < N; i++)
            memo[i] = INT_MAX;

        go(ms, N-1);

        vector<int> res;
        int node = N-1;
        while (node) {
            res.push_back(prev[node]);
            node &= ~(1<<prev[node]);
        }

        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <int> p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    CompanyMessages *obj;
    vector <int> answer;
    obj = new CompanyMessages();
    clock_t startTime = clock();
    answer = obj->getRank(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p1[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p1.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p1[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <int> p1;

    {
    	// ----- test 0 -----
    	string t0[] = {"000","000","000"};
    	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    	int t1[] = {0,1,2};
    	p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    	// ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"000","100","010"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {2,1,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
    	// ----- test 2 -----
    	string t0[] = {"012105","601745","830479","043086","349904","649810"};
    	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    	int t1[] = {4,2,1,5,0,3};
    	p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    	// ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
