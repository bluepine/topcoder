#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

struct node {
    int x1;
    int y1;
    int x2;
    int y2;
    int steps;
};

bool visited[20][20][20][20];

class PathFinding {
public:
    int minTurns(vector <string> board) {
        for (int x1 = 0; x1 < 20; x1++)
            for (int y1 = 0; y1 < 20; y1++)
                for (int x2 = 0; x2 < 20; x2++)
                    for (int y2 = 0; y2 < 20; y2++)
                        visited[x1][y1][x2][y2] = false;

        int M = board.size();
        int N = board[0].size();
        node src;
        src.steps = 0;
        for (int x = 0; x < M; x++) {
            for (int y = 0; y <N; y++) {
                if (board[x][y] == 'A') src.x1 = x, src.y1 = y;
                else if (board[x][y] == 'B') src.x2 = x, src.y2 = y;
            }
        }

        queue<node> qs;
        qs.push(src);
        while (!qs.empty()) {
            node w = qs.front();
            qs.pop();

            if (visited[w.x1][w.y1][w.x2][w.y2]) continue;
            visited[w.x1][w.y1][w.x2][w.y2] = true;

            //cout << "where " << w.x1 << "," << w.y1 << "," << w.x2 << "," << w.y2 << endl;
            if (w.x1 == src.x2 && w.y1 == src.y2
                && w.x2 == src.x1 && w.y2 == src.y1) {
                return w.steps;
            }

            for (int dx1 = -1; dx1 <= 1; dx1++) {
                for (int dy1 = -1; dy1 <= 1; dy1++) {
                    for (int dx2 = -1; dx2 <= 1; dx2++) {
                        for (int dy2 = -1; dy2 <= 1; dy2++) {
                            node nw;
                            nw.steps = w.steps + 1;
                            nw.x1 = w.x1 + dx1;
                            nw.y1 = w.y1 + dy1;
                            nw.x2 = w.x2 + dx2;
                            nw.y2 = w.y2 + dy2;
                            
                            if ((nw.x1 <= -1) || (nw.x1 >= M) || (nw.y1 <= -1) || (nw.y1 >= N) || (board[nw.x1][nw.y1] == 'X') ||
                                (nw.x2 <= -1) || (nw.x2 >= M) || (nw.y2 <= -1) || (nw.y2 >= N) || (board[nw.x2][nw.y2] == 'X') || 
                                ((nw.x1 == nw.x2) && (nw.y1 == nw.y2)) ||
                                ((nw.x1 == w.x2) && (nw.y1 == w.y2) && (nw.x2 == w.x1) && (nw.y2 == w.y1))) {
                                continue;
                            }
                            qs.push(nw);
                        }
                    }
                }
            }
        }

        return -1;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    PathFinding *obj;
    int answer;
    obj = new PathFinding();
    clock_t startTime = clock();
    answer = obj->minTurns(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;

    {
        // ----- test 0 -----
        string t0[] = {"....",".A..","..B.","...."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
    // ----- test 1 -----
    string t0[] = {"XXXXXXXXX","A...X...B","XXXXXXXXX"};
    		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = -1;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    string t0[] = {"XXXXXXXXX","A.......B","XXXXXXXXX"};
    		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = -1;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    string t0[] = {"XXXXXXXXX","A.......B","XXXX.XXXX"};
    		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 8;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    string t0[] = {"...A.XXXXX.....",".....XXXXX.....","...............",".....XXXXX.B...",".....XXXXX....."};
    		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 13;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 5 -----
    string t0[] = {"AB.................X","XXXXXXXXXXXXXXXXXXX.","X..................X",".XXXXXXXXXXXXXXXXXXX","X..................X","XXXXXXXXXXXXXXXXXXX.","X..................X",".XXXXXXXXXXXXXXXXXXX","X..................X","XXXXXXXXXXXXXXXXXXX.","X..................X",".XXXXXXXXXXXXXXXXXXX","X..................X","XXXXXXXXXXXXXXXXXXX.","X..................X",".XXXXXXXXXXXXXXXXXXX","X..................X","XXXXXXXXXXXXXXXXXXX.","...................X",".XXXXXXXXXXXXXXXXXXX"};
    		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 379;
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
