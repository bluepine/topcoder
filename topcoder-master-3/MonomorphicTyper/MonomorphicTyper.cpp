#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>

using namespace std;

class MonomorphicTyper {
public:
    string infer(string str, vector <string> ds) {
        map<string, string> ms;
        for (int i = 0; i < (int)ds.size(); i++) {
            int f = ds[i].find_first_of(':');
            ms[ds[i].substr(0, f)] = ds[i].substr(f+1, ds[i].size()-f-1);
        }

        //for (auto it = ms.begin(); it != ms.end(); it++) {
        //    cout << it->first << "," << it->second << endl;
        //}

        return go(str, ms);
    }

    string go(string str, map<string, string> & ms) {
        //cout << str << endl;
        size_t found = str.find_first_of('(');
        if (found == string::npos) {
            if (ms.find(str) == ms.end()) return "";
            return ms[str];
        }

        string res = str.substr(0, found+1);
        string args = str.substr(found+1, str.size()-found-2);
        size_t p1 = 0, p2 = 0, l = 0;
        while (p1 < args.size()) {
            while (p2 < args.size() && args[p2] != ',') {
                if (args[p2] == '(') l++;
                else if (args[p2] == ')') l--;
                p2++;
            }
            if (l == 0) {
                res += go(args.substr(p1, p2-p1), ms);
                res.push_back(',');
                p1 = p2+1;
                p2 = p1;
            }
            else {
                p2++;
            }
        }
        res[res.size()-1] = ')';
        if (ms.find(res) == ms.end()) return "";
        return ms[res];
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    MonomorphicTyper *obj;
    string answer;
    obj = new MonomorphicTyper();
    clock_t startTime = clock();
    answer = obj->infer(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p2 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    vector <string> p1;
    string p2;

    {
        // ----- test 0 -----
        p0 = "x";
        string t1[] = {"x:Char"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "Char";
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "upper(x)";
        string t1[] = {"x:Char","upper(Char):Char"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "Char";
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "ord(upper(letter))";
        string t1[] = {"ord(Char):Int","upper(Char):Char","letter:Char","Letter:String"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "Int";
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "id(id)";
        string t1[] = {"id(Int):Int"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "";
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "f(unknown)";
        string t1[] = {"f(A):B"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "";
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "fst(zero)";
        string t1[] = {"fst(Int,Int):Int","zero:Int"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "";
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        p0 = "Func(Int,Char,a)";
        string t1[] = {"Int:Char","Func(Char,Char,Int):Int","Char:Char","a:Int"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "Int";
        all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 7 -----
        p0 = "f(f(c,c),f(f(f(c,c),f(c,c)),f(f(c,c),f(c,c))))";
        string t1[] = {"f(C,C):C", "c:C"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "C";
        all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
        // ------------------
    }


    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
