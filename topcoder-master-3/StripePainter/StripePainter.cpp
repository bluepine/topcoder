#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class StripePainter {
public:
	int minStrokes(string stripes) {
        int N = stripes.size();
        vector<vector<int> > dp(N, vector<int>(N, 0));
        for (int s = 0; s < N; s++) dp[s][0] = 1;
        for (int l1 = 1; l1 < N; l1++) {
            for (int s = 0; s < N-l1; s++) {
                if (stripes[s] == stripes[s+l1]) {
                   if(l1 == 1) dp[s][l1] = 1;
                   else dp[s][l1] = dp[s+1][l1-2]+1;
                }
                else {
                    dp[s][l1] = min(dp[s][l1-1], dp[s+1][l1-1])+1;
                }
            } 

            for (int s = 0; s < N-l1; s++) {
                for (int l2 = 0; l2 < l1; l2++)
                    dp[s][l1] = min(dp[s][l1], dp[s][l2]+dp[s+l2][l1-l2]-1);
            }
        }

        //for (int l = 0; l < N; l++) {
            //for (int s = 0; s < N; s++)
                //cout << dp[s][l] << " ";
            //cout << endl;
        //}

        return dp[0][N-1];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	StripePainter *obj;
	int answer;
	obj = new StripePainter();
	clock_t startTime = clock();
	answer = obj->minStrokes(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "RGBGR";
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "RGRG";
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ABACADA";
	p1 = 4;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "AABBCCDDCCBBAABBCCDD";
	p1 = 7;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "BECBBDDEEBABDCADEAAEABCACBDBEECDEDEACACCBEDABEDADD";
	p1 = 26;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
