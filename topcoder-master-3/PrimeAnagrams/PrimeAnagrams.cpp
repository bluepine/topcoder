#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

using namespace std;

#define MAX 1000000
int prime[MAX];

class PrimeAnagrams {
public:
    vector<int> primes(string anagram) {
        prime[0] = prime[1] = false;
        for (int i = 2; i < MAX; i++) prime[i] = true;
        for (int i = 2; i*i < MAX; i++)
            if (prime[i])
                for (int j = i*i; j < MAX; j += i)
                    prime[j] = false;

        vector<int> res(3, -1);
        int minp = INT_MAX;
        int N = anagram.size();
        sort(anagram.begin(), anagram.end());
        do {
            for (int i = 1; i < N-1; i++) {
                int a = toInt(anagram.substr(0, i));
                if (!prime[a]) continue;
                for (int j = i+1; j < N; j++) {
                    int b = toInt(anagram.substr(i, j-i));
                    if (!prime[b]) continue;
                    int c = toInt(anagram.substr(j, N-j));
                    if (!prime[c]) continue;
                    int p = a*b*c;
                    if (p < minp) {
                        minp = p;
                        res[0] = a;
                        res[1] = b;
                        res[2] = c;
                    }
                }
            }
        } while (next_permutation(anagram.begin(), anagram.end()));

        if (INT_MAX == minp) return vector<int>();
        sort(res.begin(), res.end());
        return res;
    }

    int toInt(string str) {
        int res = 0;
        for (int i = 0; i < (int)str.size(); i++) {
            res *= 10;
            res += str[i]-'0';
            if (res == 0) return res;
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, vector <int> p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    PrimeAnagrams *obj;
    vector <int> answer;
    obj = new PrimeAnagrams();
    clock_t startTime = clock();
    answer = obj->primes(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p1[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p1.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p1[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    vector <int> p1;

    {
        // ----- test 0 -----
        p0 = "39151";
        int t1[] = {5,13,19};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "921179";
        int t1[] = {2,17,199};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "01123";
        int t1[] = {2,3,101};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "0707070";
        p1.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "222";
        int t1[] = {2,2,2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "123";
        p1.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
