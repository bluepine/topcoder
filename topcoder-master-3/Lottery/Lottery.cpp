#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Lottery {
public:
    vector <string> sortByOdds(vector <string> rules) {
        vector<pair<long long, string> > tickets;
        for (size_t i = 0; i < rules.size(); i++) {
            size_t j = rules[i].find_first_of(':');
            string ticket = rules[i].substr(0, j);
            istringstream stream(rules[i].substr(j+1, rules[i].size()-j));
            int choices;
            stream >> choices;
            int blanks;
            stream >> blanks;
            char sorted;
            stream >> sorted;
            char unique;
            stream >> unique;
            if (sorted == 'T' && unique == 'T')
                tickets.push_back(make_pair(comb(choices, blanks), ticket));
            else if (sorted == 'T' && unique == 'F') {
                cout << comb(choices-1+blanks, blanks) << endl;
                tickets.push_back(make_pair(comb(choices+blanks-1, blanks), ticket));
            }
            else if (sorted == 'F' && unique == 'T')
                tickets.push_back(make_pair(perm(choices, blanks), ticket));
            else
                tickets.push_back(make_pair(pow(choices, blanks), ticket));
        }
        sort(tickets.begin(), tickets.end());
        vector <string> res;
        for (size_t i = 0; i < tickets.size(); i++)
            res.push_back(tickets[i].second);
        return res;
    }

    long long pow(int m, int n) {
        long long res = 1;
        long long t = m;
        for (; n > 0; n /= 2) {
            if (n%2 == 1) res *= t;
            t *= t;
        }
        return res;
    }

    long long fact(int m) {
        long long res = 1;
        long long t = m;
        while (t > 0) {
            res *= t--;
        }
        return res;
    }

    long long perm(int n, int m) {
        long long res = 1;
        long long t = n;
        while (m > 0) {
            res *= t--;
            m--;
        }
        return res;
    }

    long long comb(int n, int m) {
        return perm(n,m)/fact(m);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    Lottery *obj;
    vector <string> answer;
    obj = new Lottery();
    clock_t startTime = clock();
    answer = obj->sortByOdds(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << "\"" << p1[i] << "\"";
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << answer[i] << "\"";
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p1.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p1[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;

    {
    // ----- test 0 -----
    string t0[] = {"PICK ANY TWO: 10 2 F F","PICK TWO IN ORDER: 10 2 T F","PICK TWO DIFFERENT: 10 2 F T","PICK TWO LIMITED: 10 2 T T"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    string t1[] = {"PICK TWO LIMITED","PICK TWO IN ORDER","PICK TWO DIFFERENT","PICK ANY TWO"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
    }

    {
    // ----- test 1 -----
    string t0[] = {"INDIGO: 93 8 T F","ORANGE: 29 8 F T","VIOLET: 76 6 F F","BLUE: 100 8 T T","RED: 99 8 T T","GREEN: 78 6 F T","YELLOW: 75 6 F F"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    string t1[] = {"RED","ORANGE","YELLOW","GREEN","BLUE","INDIGO","VIOLET"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
    }

    {
    // ----- test 2 -----
    p0.clear() /*{}*/;
    p1.clear() /*{}*/;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
