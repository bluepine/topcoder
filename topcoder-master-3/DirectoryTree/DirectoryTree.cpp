#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>

using namespace std;

struct Node;
struct Increase {
	bool operator() (Node *, Node *);
};
struct Node {
	string folder;
	set<Node*, Increase> children;
	Node(string f) : folder(f) {}
};
bool Increase::operator() (Node * a, Node * b) { return a->folder < b->folder; }

class DirectoryTree {
public:
	vector<string> display(vector<string> files) {
		Node * root = new Node("ROOT");
		for (int i = 0; i < (int)files.size(); i++) {
			replace(files[i].begin(), files[i].end(), '/', ' ');
			istringstream is(files[i]);
			Node * node = root;
			string str;
			while (is >> str) {
				Node * child = new Node(str);
				set<Node*>::iterator it = node->children.find(child);
				if (it == node->children.end()) node->children.insert(child);
				else child = *it;
				node = child;
			}
		}

		vector<string> res;
		go(root, -2, res);
		return res;
	}

	void go(Node * node, int n, vector<string> & res) {
		if (n >= 0) {
			int i = res.size()-1;
			while (i > 0 && res[i][n] == ' ') i--;
			if (res[i][n] == '+') {
				int j = res.size()-1;
				while (j > i) res[j--][n] = '|';
			}
			string str(n, ' ');
			str += "+-";
			str += node->folder;
			res.push_back(str);
		}
		else {
			res.push_back(node->folder);
		}
		set<Node*>::iterator it = node->children.begin();
		while (it != node->children.end()) {
			go(*it++, n+2, res);
		}
	}	
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DirectoryTree *obj;
	vector <string> answer;
	obj = new DirectoryTree();
	clock_t startTime = clock();
	answer = obj->display(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;

	{
		// ----- test 0 -----
		string t0[] = {"/usr/lib/libc","/usr/bin/find","/home/schveiguy/bashrc","/usr/bin/bash","/usr/local/bin/ssh"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"ROOT","+-home","| +-schveiguy","|   +-bashrc","+-usr","  +-bin","  | +-bash","  | +-find","  +-lib","  | +-libc","  +-local","    +-bin","      +-ssh"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"/dir/dir/file","/dir/file","/file","/dir/sharedname/dir","/dir/dir/sharedname"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"ROOT","+-dir","| +-dir","| | +-file","| | +-sharedname","| +-file","| +-sharedname","|   +-dir","+-file"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"/a/a/a/a/a/a/a","/a/b/a/a/a/a/a","/a/a/a/a/b/a/a"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"ROOT","+-a","  +-a","  | +-a","  |   +-a","  |     +-a","  |     | +-a","  |     |   +-a","  |     +-b","  |       +-a","  |         +-a","  +-b","    +-a","      +-a","        +-a","          +-a","            +-a"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
