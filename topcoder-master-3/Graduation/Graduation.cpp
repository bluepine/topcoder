#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

bool taken[128];
int req_match[128];
int cls_match[128];
int from[128];
vector<vector<int> > graph;

class Graduation {
public:
    string moreClasses(string classesTaken, vector <string> requirements) {
        graph.clear();
        for (int i = 0; i < (int)requirements.size(); i++) {
            int N = atoi(requirements[i].c_str());
            vector<int> reqs;
            for (int j = 0; j < (int)requirements[i].size(); j++) {
                int c = requirements[i][j];
                if (!isdigit(c))
                    reqs.push_back(c);
            }
            for (int j = 0; j < N; j++)
                graph.push_back(reqs);
        }
        if (graph.size() > 94) return "0";

        //for (int i = 0; i < (int)graph.size(); i++) {
        //    cout << "req " << i << ": ";
        //    for (int j = 0; j < (int)graph[i].size(); j++) {
        //        cout << (char)graph[i][j] << " "; 
        //    }
        //    cout << endl;
        //}

        for (int i = 0; i < 128; i++)
            taken[i] = false;
        for (int i = 0; i < (int)classesTaken.size(); i++) 
            taken[(int)classesTaken[i]] = true;

        int total = match();
        //cout << "total: " << total << endl;
        string res = "";
        int i;
        for (i = 33; i <= 126; i++) {
            if (total == (int)graph.size())
                break;
            if (taken[i]) continue;
            taken[i] = true;
            int flow = match();
            //cout << "char: " << (char)i << " flow: " << flow << endl;
            if (flow == total) {
                taken[i] = false;
                continue;
            }

            res.push_back((char)i);
            total = flow;
        }
        if (i == 127) return "0";
        return res;
    }

    int match() {
        for (int i = 0; i < 128; i++)
            req_match[i] = -1;
        for (int j = 0; j < 128; j++)
            cls_match[j] = -1;
        int res = 0;  
        for (int src = 0; src < (int)graph.size(); src++)
            res += bfs(src);
        return res;
    }

    int bfs(int src) {
        for (int i = 0; i < 128; i++)
            from[i] = -1;    
        from[src] = src;
        queue<int> q;
        q.push(src);
        bool found = false;
        int where = -1, match = -1;
        while (!q.empty() && !found) {
            where = q.front(); q.pop();
            //cout << "where: " << where << endl;
            for (int j = 0; j < (int)graph[where].size(); j++) {
                match = graph[where][j];
                if (!taken[match]) continue;
                int next = cls_match[match];
                if (where == next) continue;
                if (next == -1) {
                    found = true;
                    break;
                }
                if (from[next] == -1) {
                    q.push(next);
                    from[next] = where;
                    //cout << "push: " << next << endl;
                }
            }
        }

        //cout << "from:" << endl;
        //for (int i = 0; i < (int)graph.size(); i++)
        //    cout << from[i] << " ";
        //cout << endl;

        if (!found) return 0;
        while (from[where] != where) {
            int tmp = req_match[where];
            req_match[where] = match;
            cls_match[match] = where;
            where = from[where];
            match = tmp;
        }

        req_match[where] = match;
        cls_match[match] = where; 

        //cout << "require match:" << endl;
        //for (int i = 0; i < (int)graph.size(); i++)
        //    cout << req_match[i] << " ";
        //cout << endl;
        //cout << "class match:" << endl;
        //for (int j = 33; j <= 126; j++ )
        //    cout << cls_match[j] << " ";
        //cout << endl;

        return 1;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    Graduation *obj;
    string answer;
    obj = new Graduation();
    clock_t startTime = clock();
    answer = obj->moreClasses(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p2 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 20) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    vector <string> p1;
    string p2;

    {
        // ----- test 0 -----
        p0 = "A";
        string t1[] = {"2ABC","2CDE"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "BCD";
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "+/NAMT";
        string t1[] = {"3NAMT","2+/","1M"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "";
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
    // ----- test 2 -----
    p0 = "A";
    string t1[] = {"100%*Klju"};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = "0";
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 3 -----
    p0 = "";
    string t1[] = {"5ABCDE","1BCDE,"};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = ",ABCDE";
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
    }

    {
    // ----- test 4 -----
    p0 = "CDH";
    string t1[] = {"2AP","3CDEF","1CDEFH"};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = "AEP";
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
