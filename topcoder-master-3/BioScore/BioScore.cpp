#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cfloat>

using namespace std;

class BioScore {
public:
	double maxAvg(vector <string> knownSet) {
	    int M = knownSet.size();
        int N = knownSet[0].size();
        string ts[] = {"AA", "CC", "GG", "TT", "AC", "AG", "AT", "CG", "CT", "GT"};
        vector<int> fs(10, 0);
        for (int i = 0; i < M-1; i++) {
            for (int j = i+1; j < M; j++) {
                for (int k = 0; k < N; k++) {
                    string s(2, ' ');
                    s[0] = knownSet[i][k];
                    s[1] = knownSet[j][k];
                    sort(s.begin(), s.end());
                    int i = find(ts, ts+10, s)-ts;
                    fs[i]++;
                } 
            }
        }
        sort(fs.begin()+4, fs.end(), greater<int>());
       
        //cout << "fs" << endl;
        //for (int i = 0; i < 10; i++)
            //cout << fs[i] << " ";
        //cout << endl;

        double res = -DBL_MAX;
        vector<int> ss(10, 0);
        ss[4] = ss[5] = 10;
        ss[7] = ss[8] = ss[9] = -10;
        for (ss[0] = 1; ss[0] <= 10; ss[0]++) {
            for (ss[1] = 1; ss[1] <= 10; ss[1]++) {
                for (ss[2] = 1; ss[2] <= 10; ss[2]++) {
                    for (ss[3] = 1; ss[3] <= 10; ss[3]++) {
                        int gs = ss[0]+ss[1]+ss[2]+ss[3];
                        if (gs%2 == 0) {
                            ss[6] = 10-gs/2;
                            
                            double sol = 0;
                            for (int i = 0; i < 10; i++)
                                sol += fs[i]*ss[i];
                            sol /= (M*(M-1)/2);
                            if (sol > res) {
                                res = sol;
                            }
                        }
                    }
                }
            }
        }

        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    BioScore *obj;
    double answer;
    obj = new BioScore();
    clock_t startTime = clock();
    answer = obj->maxAvg(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    double p1;

    {
    // ----- test 0 -----
    string t0[] = {"AAA","AAA","AAC"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 30.0;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"ACTGACTGACTG","GACTTGACCTGA"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = -4.0;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
    // ----- test 2 -----
    string t0[] = {"ACTAGAGAC","AAAAAAAAA","TAGTCATAC","GCAGCATTC"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 50.5;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
