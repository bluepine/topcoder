#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;



class Prerequisites {
public:
    struct Course {
        Course(string s) {
            int N = s.size();
            int i = 0;
            while (i < N) {
                if (s[i] >= '0' && s[i] <= '9')
                    break;
                i++;
            }
            dep = s.substr(0, i);
            istringstream stream(s.substr(i, N-i));
            stream >> num;
        }

        bool operator==(const Course& rhs) const {
            return (dep == rhs.dep) && (num == rhs.num);
        }

        bool operator<(const Course& rhs)const {
            return (num < rhs.num) || (num == rhs.num && dep < rhs.dep);
        }

        string to_string() {
            ostringstream stream;
            stream << this->dep;
            stream << this->num;
            return stream.str();
        }

        int num;
        string dep;
    };

    vector<string> orderClasses(vector <string> param0) {
        map<Course, set<Course> > graph;
        for (size_t i = 0; i < param0.size(); i++) {
            string line = param0[i];
            vector<string> t1 = tokenize(line, ":");
            Course start(t1[0]);
            set<Course> ends;
            if (t1.size() == 2) {
                vector<string> t2 = tokenize(t1[1], " ");
                for (size_t j = 0; j < t2.size(); j++)
                    ends.insert(Course(t2[j]));
            }
            graph[start] = ends;
        }

        vector<Course> grey;
        vector<Course> black;
        map<Course, set<Course> >::iterator it1 = graph.begin();
        while (it1 != graph.end()) {
            if(!dfs(it1->first, graph, grey, black))
                return vector<string>();
            it1++;
        }

        vector <string> res;
        vector<Course> ::iterator it2 = black.begin();
        while (it2 != black.end()) {
            res.push_back(it2->to_string());
            it2++;
        }
        return res;
    }

    bool dfs(Course start, map<Course, set<Course> > &white, vector<Course> &grey, vector<Course> &black) {
        if (find(grey.begin(), grey.end(), start) != grey.end()) {
            if (find(black.begin(), black.end(), start) != black.end()) return true;
            return false;
        }
        grey.push_back(start);
        map<Course, set<Course> >::iterator it1 = white.find(start);
        set<Course>::iterator it2 = (it1->second).begin();
        while (it2 != (it1->second).end()) {
            if (!dfs(*it2, white, grey, black))
                return false;
            it2++;
        }
        black.push_back(start);
        return true;
    }

    vector<string> tokenize(string s, string ch) {
        vector<string> res;
        for(int p = 0, p2; p < (int)s.size(); p = p2+1) {
            p2 = s.find_first_of(ch, p);
            if( p2 == -1 ) p2 = s.size();
            if( p2-p > 0 ) res.push_back(s.substr(p, p2-p));
        }
        return res;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    Prerequisites *obj;
    vector <string> answer;
    obj = new Prerequisites();
    clock_t startTime = clock();
    answer = obj->orderClasses(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << "\"" << p1[i] << "\"";
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << answer[i] << "\"";
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p1.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p1[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;

    {
        // ----- test 0 -----
        string t0[] = {"CSE121: CSE110","CSE110:","MATH122:"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"CSE110","CSE121","MATH122"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"ENGL111: ENGL110","ENGL110: ENGL111"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"ENGL111: ENGL110"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"CSE258: CSE244 CSE243 INTR100","CSE221: CSE254 INTR100","CSE254: CSE111 MATH210 INTR100","CSE244: CSE243 MATH210 INTR100","MATH210: INTR100","CSE101: INTR100","CSE111: INTR100","ECE201: CSE111 INTR100","ECE111: INTR100","CSE243: CSE254","INTR100:"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"INTR100","CSE101","CSE111","ECE111","ECE201","MATH210","CSE254","CSE221","CSE243","CSE244","CSE258"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
