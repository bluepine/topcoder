#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>

using namespace std;

struct Point {
    int x;
    int y;
    Point(int x, int y):x(x),y(y) {}
};

class Surveyor {
public:
    int area(string direction, vector <int> length) {
        int N = direction.size();
        vector<Point> vs;
        vs.push_back(Point(0, 0));
        int i = 0;
        while (i < N) {
            Point p = vs.back();
            do {
                switch (direction[i])
                {
                case 'N':
                    p.y += length[i];
                    break;
                case 'S':
                    p.y -= length[i];
                    break;
                case 'E':
                    p.x += length[i];
                    break;
                case 'W':
                    p.x -= length[i];
                    break;
                default:
                    break;
                }
                vs.push_back(p);
                i++;
            } while (i < N && direction[i-1] == direction[i]);
        }

        int res = 0;
        for (int i = 1; i < N-1; i++)
            res += (vs[i].x*vs[i+1].y-vs[i].y*vs[i+1].x);
        return abs(res)/2;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    Surveyor *obj;
    int answer;
    obj = new Surveyor();
    clock_t startTime = clock();
    answer = obj->area(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    vector <int> p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = "NWWSE";
        int t1[] = {10,3,7,10,10};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 100;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "NESWNWSW";
        int t1[] = {20,200,30,100,20,30,10,70};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 4700;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
