#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int ms[10][128];
int cs[10][10];
int ts[10][10];
int N;

class TCSocks {
public:
    int earnMoney(vector <int> money, vector <string> cost, vector <string> time, vector <string> competitors) {
        N = money.size();
        for (int i = 0; i < N; i++) {
            istringstream is(cost[i]);
            int j = 0;
            while (is >> cs[i][j]) j++;
        }

        for (int i = 0; i < N; i++) {
            istringstream is(time[i]);
            int j = 0;
            while (is >> ts[i][j]) j++;
        }

        for (int i = 0; i < N; i++)
            for (int j = 0; j < 128; j++)
                ms[i][j] = money[i];

        for (int i = 0; i < (int)competitors.size(); i++) {
            istringstream is(competitors[i]);
            int c = 0, t = 0;
            int n;
            while (is >> n) {
                t += ts[c][n];
                for (int j = t; j < 128; j++)
                    ms[n][j] /= 2;
                c = n;
            }
        }

        int res = 0;
        dfs(0, 0, 0, 0, res);
        return res;
    }

    void dfs(int c, int t, int m, int v, int & res) {
        int nm = m - cs[c][0];
        if (nm > res) res = nm;
        
        v |= 1<<c;

        for (int nc = 1; nc < N; nc++) {
            if (v>>nc&1) continue;
            int nt = t+ts[c][nc];
            int nm = m-cs[c][nc]+ms[nc][nt];
            dfs(nc, nt, nm, v, res);
        }
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, vector <string> p2, vector <string> p3, bool hasAnswer, int p4) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p2[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p3.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p3[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    TCSocks *obj;
    int answer;
    obj = new TCSocks();
    clock_t startTime = clock();
    answer = obj->earnMoney(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p4 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p4;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <string> p1;
    vector <string> p2;
    vector <string> p3;
    int p4;

    {
        // ----- test 0 -----
        int t0[] = {0,100,100,100};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0 50 50 200","0 0 50 200","0 10 0 200","0 0 0 0"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"0 1 1 1","1 0 1 1","1 1 0 1","1 1 1 0"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3.clear() /*{}*/;
        p4 = 140;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {0,100,100,100};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0 50 50 200","0 0 50 200","0 10 0 200","0 0 0 0"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"0 1 1 1","1 0 1 1","1 1 0 1","1 1 1 0"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"3","2 3 1","2 1"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 50;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {0,100,200};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0 20 10","10 0 20","20 10 0"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"0 1 5","1 0 1","1 1 0"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"2","2"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 240;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {0,40,40,40,40,40};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0 25 25 25 25 25","25 0 25 25 25 25","25 25 0 25 25 25","25 25 25 0 25 25","25 25 25 25 0 25","25 25 25 25 25 0"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"0 1 1 1 1 1","1 0 1 1 1 1","1 1 0 1 1 1","1 1 1 0 1 1","1 1 1 1 0 1","1 1 1 1 1 0"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"1","2","3","4","5"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {0,70,70,70,70,70};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0 25 25 25 25 25","25 0 25 25 25 25","25 25 0 25 25 25","25 25 25 0 25 25","25 25 25 25 0 25","25 25 25 25 25 0"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"0 1 1 1 1 1","1 0 1 1 1 1","1 1 0 1 1 1","1 1 1 0 1 1","1 1 1 1 0 1","1 1 1 1 1 0"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"1","2","3","4","5"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 25;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {0,457,434,382,818,403,265,449,214};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0 204 600 800 885 542 439 823 913","32 0 813 687 242 129 34 447 862","56 462 0 727 71 309 461 867 200","656 96 334 0 178 650 108 477 547","89 856 922 495 0 821 374 100 651","634 810 319 947 322 0 283 227 286","446 416 272 551 243 880 0 47 878","390 315 221 765 938 732 747 0 435","902 616 166 830 223 406 736 712 0"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"0 1 10 6 5 5 4 7 6","5 0 2 7 3 2 1 4 2","1 9 0 8 6 1 3 9 9","2 8 8 0 1 9 10 4 5","8 8 2 7 0 5 3 9 1","6 8 9 9 3 0 7 4 7","10 8 9 10 7 1 0 9 4","8 6 5 1 6 6 5 0 4","3 8 4 4 6 10 10 3 0"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        string t3[] = {"1 8 2 5 4 7 6","6 2 4","8 7"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 785;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
