#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int dist[1024][40];

struct order {
    bool operator() (const int x, const int y) const {
        return make_pair(dist[x/40][x%40], x) < make_pair(dist[y/40][y%40], y);
    }
};

class IslandFerries {
public:
    vector <int> costs(vector <string> legs, vector <string> prices) {
        int M = legs.size();
        int N = prices.size();

        vector<vector<pair<int, int > > > ls;
        for (int i = 0; i < M; i++) {
            vector<pair<int, int> > l;
            istringstream is(legs[i]);
            string str;
            while (is >> str) {
                int p = str.find_first_of('-');
                istringstream fs(str.substr(0, p));
                int f;
                fs >> f;
                istringstream ts(str.substr(p+1, str.size()-(p+1)));
                int t;
                ts >> t;
                l.push_back(make_pair(f, t));
            }
            ls.push_back(l);
        }

        //for (int i = 0; i < M; i++) {
        //    for (int j = 0; j < (int)ls[i].size(); j++)
        //        cout << ls[i][j].first << "," << ls[i][j].second << " ";
        //    cout << endl;
        //}

        vector<vector<int> > ps;
        for (int i = 0; i < N; i++) {
            vector<int> p;
            istringstream is(prices[i]);
            int num;
            while (is >> num) {
                p.push_back(num);
            }
            ps.push_back(p);
        }

        //for (int i = 0; i < N; i++) {
        //    for (int j = 0; j < (int)ps[i].size(); j++)
        //        cout << ps[i][j] << " ";
        //    cout << endl;
        //}

        for (int i = 0; i < 1024; i++)
            for (int j = 0; j < 40; j++)
                dist[i][j] = INT_MAX;
        set<int, order> qs;
        qs.insert(0);
        dist[0][0] = 0;
        while (!qs.empty()) {
            int w = *qs.begin();
            qs.erase(qs.begin());
            int t = w/40;
            int p = w%40;
            int c = dist[t][p];

            bitset<10> bs(t);
            //cout << "ticket " << bs << " island " << p << " cost " << c  << endl;
            int have = 0;
            for (int i = 0; i < M; i++) {
                if (t&(1<<i)) {
                    have += 1;
                    int nt = t&~(1<<i);
                    for (int j = 0; j < (int)ls[i].size(); j++) {
                        if (ls[i][j].first == p) {
                            int np = ls[i][j].second;
                            int nc = c;
                            if (dist[nt][np] > nc) {
                                int nw = nt*40+np;
                                if (qs.count(nw)) qs.erase(nw);
                                dist[nt][np] = nc;
                                qs.insert(nw);
                            }
                        }
                    }
                }
            }

            if (have < 3) {
                int np = p;
                for (int i = 0; i < M; i++) {
                    if (t&(1<<i)) continue;
                    int nt = t|(1<<i);
                    int nc = c + ps[np][i];
                    if (dist[nt][np] > nc) {
                        int nw = nt*40+np;
                        if (qs.count(nw)) qs.erase(nw);
                        dist[nt][np] = nc;
                        qs.insert(nw);
                    }
                }
            }
        }

        vector<int> res;
        for (int i = 1; i < N; i++) {
            if (dist[0][i] == INT_MAX) res.push_back(-1);
            else res.push_back(dist[0][i]);
        }
        return res;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, vector <int> p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    IslandFerries *obj;
    vector <int> answer;
    obj = new IslandFerries();
    clock_t startTime = clock();
    answer = obj->costs(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p2.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p2[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p2.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p2[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;
    vector <int> p2;

    {
        // ----- test 0 -----
        string t0[] = {"0-1 0-3","0-2"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"5 7","1000 1000","1000 1000","1000 1000"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {5,7,5};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"0-1 1-2 2-3","0-1 2-3"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"1 10","20 25","50 50","1000 1000","1000 1000"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,11,31,-1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"0-1","1-0","0-2","2-3"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"1 1 1000 1000","1000 1000 10 100","1000 1000 1000 1000","1000 1000 1000 1000"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,12,112};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"1-0"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"793","350"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {-1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"8-18 4-11 15-5 7-12 11-8 0-15 15-2 3-11 4-18 2-3","16-2 18-3 15-18 11-19 18-2 18-7 19-17 3-15 12-19","2-17 0-12 1-2 14-12 6-2 4-2 11-5 4-11 11-6 17-16","0-18 13-18 16-0 3-7 14-12 3-1 19-18 3-19 10-3 8-15","18-19 3-16 13-6 0-19 12-14 5-17 1-12 7-13 9-14 1-2","14-5 17-9 2-10 16-13 11-15 10-17 14-10 0-14 2-13","4-5 0-17 6-9 17-7 12-6 5-6 6-18 10-18 0-2 13-0 8-4","3-12 4-11 10-17 13-12 3-0 3-7 13-0 9-15 10-9 0-10"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"592 219 88 529 324 86 503 610","2 94 8 600 34 95 6 494","638 301 10 246 290 97 85 74","118 8 939 393 450 79 317 99","99 806 698 740 2 26 525 818","95 9 615 972 23 23 5 666","6 448 440 710 83 4 419 496","4 47 182 4 185 70 718 770","3 321 6 855 968 65 10 6","173 224 300 3 79 2 707 49","21 10 7 10 4 9 5 8","6 600 4 724 7 1 960 247","83 16 901 50 437 780 658 2","763 923 125 576 45 423 3 1","7 324 391 898 8 59 281 973","9 44 49 364 78 744 43 5","10 62 75 418 216 90 32 919","764 534 778 605 80 647 821 74","65 449 102 867 421 94 6 7","67 155 362 789 189 316 107 595"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {170,160,155,173,145,150,158,168,153,145,162,88,162,86,163,159,153,150,104};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
