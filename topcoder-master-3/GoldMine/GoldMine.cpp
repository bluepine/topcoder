#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int bs[64][8];

struct order {
    bool operator() (const int x, const int y) const {
        int xr = x/7, xc = x%7;
        int yr = y/7, yc = y%7;
        if (bs[xr][xc] == bs[yr][yc])
            return (xr > yr);
        return bs[xr][xc] < bs[yr][yc]; 
    }
};

class GoldMine {
public:
	vector <int> getAllocation(vector <string> mines, int miners) {
	    int M = mines.size();
        vector<vector<int> > ms;
        for (int i = 0; i < M; i++) {
            vector<int> m;
            string ps = mines[i];
            for (int p1 = 0, p2; p1 < (int)ps.size(); p1=p2+1) {
                p2 = ps.find_first_of(',', p1);
                if (p2 == -1) p2 = ps.size();
                if (p2 > p1) m.push_back(atoi(ps.substr(p1,p2-p1).c_str())); 
            }
            ms.push_back(m);
        }
        
        //for (int i = 0; i < M; i++) {
            //for (int j = 0; j < (int)ms[i].size(); j++)
                //cout << ms[i][j] << " ";
            //cout << endl;
        //}
        
        for (int i = 0; i < M; i++) {
            for (int k = 0; k < 7; k++) {
                int s = 0;
                for (int j = 0; j <= 6; j++) {
                    if (j > k) s += 60*ms[i][j]*k;
                    else s += 50 *ms[i][j]*j-20*ms[i][j]*(k-j);
                }
                bs[i][k] = s;
            }
        }

        for (int i = 0; i < M; i++) {
            for (int j = 7; j > 0; j--)
                bs[i][j] -= bs[i][j-1];
        }

        //for (int i = 0; i < M; i++) {
            //for (int j = 0; j < 8; j++)
                //cout << bs[i][j] << " ";
            //cout << endl;
        //}

        vector<int> res(M, 0);
        priority_queue<int, vector<int>, order> pq;
        for (int i = 0; i < M; i++)
            pq.push(i*7+1);
        while (miners != 0) {
            int top = pq.top();
            int r = top/7, c = top%7;
            pq.pop();
            res[r] += 1;
            if (c < 6) pq.push(r*7+c+1);
            miners -= 1;
        }
        return res;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, vector <int> p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    GoldMine *obj;
    vector <int> answer;
    obj = new GoldMine();
    clock_t startTime = clock();
    answer = obj->getAllocation(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p2.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p2[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p2.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p2[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;
    vector <int> p2;

    {
        // ----- test 0 -----
        string t0[] = {"000, 030, 030, 040, 000, 000, 000","020, 020, 020, 010, 010, 010, 010"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 4;
        int t2[] = {2,2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"100, 000, 000, 000, 000, 000, 000","100, 000, 000, 000, 000, 000, 000","100, 000, 000, 000, 000, 000, 000","100, 000, 000, 000, 000, 000, 000","100, 000, 000, 000, 000, 000, 000"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 8;
        int t2[] = {6,2,0,0,0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"050, 000, 000, 000, 000, 050, 000","050, 000, 000, 000, 000, 050, 000","050, 000, 000, 000, 000, 050, 000","050, 000, 000, 000, 000, 050, 000","050, 000, 000, 000, 000, 050, 000","050, 000, 000, 000, 000, 050, 000","050, 000, 000, 000, 000, 050, 000","050, 000, 000, 000, 000, 050, 000","050, 000, 000, 000, 000, 050, 000","050, 000, 000, 000, 000, 050, 000"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 30;
        int t2[] = {4,4,4,4,4,4,4,2,0,0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002"
            ", 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004","026, 012, 005, 013, 038, 002, 004"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 56;
        int t2[] = {2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"100, 000, 000, 000, 000, 000, 000","090, 010, 000, 000, 000, 000, 000","080, 020, 000, 000, 000, 000, 000","075, 025, 000, 000, 000, 000, 000","050, 050, 000, 000, 000, 000, 000","025, 075, 000, 000, 000, 000, 000","020, 080, 000, 000, 000, 000, 000","010, 090, 000, 000, 000, 000, 000","000, 100, 000, 000, 000, 000, 000","000, 090, 010, 000, 000, 000, 000","000, 080, 020, 000, 000, 000, 000","000, 075, 025, 000, 000, 000, 000","000, 050, 050, 000, 000, 000, 000","000, 025, 075, 000, 000, 000, 000","000, 020, 080, 000, 000, 000, 000","000, 010, 090, 000, 000, 000, 000","000, 000, 100, 000, 000, 000, 000","000, 000, 090, 010, 000, 000, 000","000, 000, 080, 020, 000, 000, 000","000, 000, 075, 025, 000, 000, 000","000, 000, 050, 050, 000, 000, 000","000, 000, 025, 075, 000, 000, 000","000, 000, 020, 080, 000, 000, 000","000, 000, 010, 090, 000, 000, 000","000, 000, 000, 100, 000, 000, 000","000, 000, 000, 100, 000, 000, 000","000, 000, 000, 090, 010, 000, 000","000, 000, 000, 080, 020, 000"
            ", 000","000, 000, 000, 075, 025, 000, 000","000, 000, 000, 050, 050, 000, 000","000, 000, 000, 025, 075, 000, 000","000, 000, 000, 020, 080, 000, 000","000, 000, 000, 010, 090, 000, 000","000, 000, 000, 000, 100, 000, 000","000, 000, 000, 000, 090, 010, 000","000, 000, 000, 000, 080, 020, 000","000, 000, 000, 000, 075, 025, 000","000, 000, 000, 000, 050, 050, 000","000, 000, 000, 000, 025, 075, 000","000, 000, 000, 000, 020, 080, 000","000, 000, 000, 000, 010, 090, 000","000, 000, 000, 000, 000, 100, 000","000, 000, 000, 000, 000, 090, 010","000, 000, 000, 000, 000, 080, 020","000, 000, 000, 000, 000, 075, 025","000, 000, 000, 000, 000, 050, 050","000, 000, 000, 000, 000, 025, 075","000, 000, 000, 000, 000, 020, 080","000, 000, 000, 000, 000, 010, 090","000, 000, 000, 000, 000, 000, 100"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 150;
        int t2[] = {0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        string t0[] = {"006, 009, 010, 006, 012, 016, 041", "037, 002, 030, 009, 004, 009, 009", "005, 011, 001, 034, 014, 004, 031", "019, 006, 011, 028, 022, 013, 001", "012, 002, 003, 024, 037, 007, 015", "029, 022, 012, 008, 008, 001, 020", "035, 001, 008, 013, 019, 013, 011", "029, 023, 005, 033, 006, 001, 003", "017, 024, 008, 010, 008, 003, 030", "004, 006, 005, 059, 010, 013, 003", "006, 014, 018, 037, 010, 011, 004", "008, 008, 028, 021, 022, 008, 005", "004, 033, 001, 003, 032, 012, 015", "012, 028, 018, 011, 003, 023, 005", "015, 009, 028, 028, 006, 011, 003", "008, 011, 019, 031, 015, 009, 007", "002, 001, 004, 006, 016, 029, 042", "004, 020, 007, 024, 010, 019, 016", "025, 023, 013, 011, 005, 019, 004", "024, 013, 004, 011, 015, 031, 002", "001, 003, 013, 017, 027, 025, 014", "013, 007, 015, 018, 006, 036, 005", "012, 053, 003, 002, 027, 003, 000", "026, 054, 001, 001, 006, 009, 003", "029, 003, 012, 015, 003, 017, 021", "046, 015, 010, 009, 017, 002, 001", "009, 044, 002, 011, 022, 011, 001", "035, 016, 001, 029, 015, 004, 000", "011, 003, 011, 007, 018, 019, 031", "006, 004, 001, 015, 046, 028, 000", "003, 017, 040, 011, 012, 008, 009", "014, 008, 006, 015, 008, 038, 011", "024, 038, 019, 001, 001, 004, 013", "011, 002, 027, 029, 015, 006, 010", "006, 014, 029, 016, 014, 018, 003", "033, 006, 009, 031, 018, 001, 002", "006, 010, 011, 025, 021, 024, 003", "018, 032, 018, 001, 004, 014, 013", "019, 006, 042, 003, 004, 021, 005", "005, 027, 005, 009, 013, 002, 039", "010, 012, 002, 010, 021, 039, 006", "022, 007, 007, 012, 002, 009, 041", "008, 003, 008, 008, 002, 016, 055", "033, 017, 003, 004, 010, 008, 025", "007, 041, 002, 008, 018, 008, 016", "043, 008, 013, 006, 011, 016, 003", "001, 002, 021, 012, 020, 034, 010", "008, 003, 014, 012, 049, 004, 010", "005, 021, 013, 026, 013, 004, 018", "002, 018, 023, 011, 015, 004, 027"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 201;
        int t2[] = {5, 3, 5, 4, 4, 4, 4, 3, 5, 3, 3, 4, 4, 4, 3, 4, 5, 5, 4, 4, 5, 4, 3, 1, 5, 3, 4, 3, 5, 4, 4, 5, 2, 4, 4, 3, 4, 4, 4, 5, 4, 5, 5, 5, 4, 4, 5, 4, 4, 5};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }   
    
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
