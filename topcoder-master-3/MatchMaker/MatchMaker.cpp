#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MatchMaker {
public:
    vector <string> getBestMatches(vector <string> param0, string param1, int param2) {
        vector<vector<string> > people;
        vector<string> want;
        for (size_t i = 0; i < param0.size(); i++) {
            vector<string> person = tokenize(param0[i], " ");
            people.push_back(person);
            if (person[0] == param1) want = person;
        }

        int sfMax = 0;
        vector<pair<string, int> > picked;
        for (size_t i = 0; i < people.size(); i++) {
            if (people[i][0] != want[0] && people[i][1] == want[2]) {
                int sf = 0;
                for (size_t j = 3; j < want.size(); j++)
                    if (people[i][j] == want[j]) sf++;
                if (sf < param2) continue;
                picked.push_back(make_pair(people[i][0], sf));
                if (sf > sfMax) sfMax = sf;
            }
        }
        vector<string> res;
        for (int i = sfMax; i > 0; i--) {
            for (size_t j = 0; j < picked.size(); j++) {
                if (picked[j].second == i) res.push_back(picked[j].first);
            }
        }
        return res;
    }

    vector<string> tokenize(string s, string ch) {
        vector<string> res;
        for(int p = 0, p2; p < (int)s.size(); p = p2+1) {
            p2 = s.find_first_of(ch, p);
            if( p2 == -1 ) p2 = s.size();
            if( p2-p > 0 ) res.push_back(s.substr(p, p2-p));
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, int p2, bool hasAnswer, vector <string> p3) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "\"" << p1 << "\"" << "," << p2;
    cout << "]" << endl;
    MatchMaker *obj;
    vector <string> answer;
    obj = new MatchMaker();
    clock_t startTime = clock();
    answer = obj->getBestMatches(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p3.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << "\"" << p3[i] << "\"";
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << answer[i] << "\"";
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p3.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p3[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    string p1;
    int p2;
    vector <string> p3;

    {
        // ----- test 0 -----
        string t0[] = {"BETTY F M A A C C","TOM M F A D C A","SUE F M D D D D","ELLEN F M A A C A","JOE M F A A C A","ED M F A D D A","SALLY F M C D A B","MARGE F M A A C C"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "BETTY";
        p2 = 2;
        string t3[] = {"JOE","TOM"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"BETTY F M A A C C","TOM M F A D C A","SUE F M D D D D","ELLEN F M A A C A","JOE M F A A C A","ED M F A D D A","SALLY F M C D A B","MARGE F M A A C C"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "JOE";
        p2 = 1;
        string t3[] = {"ELLEN","BETTY","MARGE"};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
