#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class GeneticCrossover {
public:
	double cross(string p1a, string p1b, string p2a, string p2b, vector <int> dom, vector <int> rec, vector <int> dependencies) {
		int N = p1a.size();
        vector<double> ps(N, -1.0);
        for (int i = 0; i < N; ++i)
            if (ps[i] == -1.0)
                crossHelper(p1a, p1b, p2a, p2b, dependencies, ps, i, N);

        //for (int i = 0; i < N; ++i)
            //cout << ps[i] << " ";
        //cout << endl;

        double res = 0.0;
        for (int i = 0; i < N; ++i)
            res += dom[i]*ps[i]+rec[i]*(1-ps[i]);
        return res;
    }

    double crossHelper(string & p1a, string & p1b, string & p2a, string & p2b, vector<int> & ds, vector<double> & ps, int i, int N) {
        if (i == N) return 0.0;
        if (ps[i] != -1.0) return ps[i];
        double p = 1.0-calc(p1a[i], p1b[i])*calc(p2a[i], p2b[i]);
        if (ds[i] == -1) ps[i] = p;
        else ps[i] = p*crossHelper(p1a, p1b, p2a, p2b, ds, ps, ds[i], N);
        return ps[i];
    }

    double calc(char a, char b) {
        if (isupper(a) && isupper(b)) return 0.0;
        if (isupper(a) || isupper(b)) return 0.5;
        return 1.0;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, string p3, vector <int> p4, vector <int> p5, vector <int> p6, bool hasAnswer, double p7) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"" << "," << "\"" << p3 << "\"" << "," << "{";
    for (int i = 0; int(p4.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p4[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p5.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p5[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p6.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p6[i];
    }
    cout << "}";
    cout << "]" << endl;
    GeneticCrossover *obj;
    double answer;
    obj = new GeneticCrossover();
    clock_t startTime = clock();
    answer = obj->cross(p0, p1, p2, p3, p4, p5, p6);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p7 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == answer && fabs(p7 - answer) <= 1e-9 * max(1.0, fabs(p7));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    string p1;
    string p2;
    string p3;
    vector <int> p4;
    vector <int> p5;
    vector <int> p6;
    double p7;

    {
        // ----- test 0 -----
        p0 = "AaaAA";
        p1 = "AaaAA";
        p2 = "AaaAA";
        p3 = "AaaAA";
        int t4[] = {1,2,3,4,5};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {-1,-2,-3,-4,-5};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        int t6[] = {-1,-1,-1,-1,1};
        p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
        p7 = -5.0;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "AbegG";
        p1 = "ABEgG";
        p2 = "aBEgg";
        p3 = "abegG";
        int t4[] = {5,5,5,5,5};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {1,1,1,1,1};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        int t6[] = {-1,0,1,2,3};
        p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
        p7 = 14.25;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "XyMpdnVsbinDvqBpcWGDLfsmQtZpeirvTmoRmBASfqqrFS";
        p1 = "xYmpdnVsBINdvQBPCwgDlFSmQTzpEIrVtmoRmbaSfqQRfS";
        p2 = "XYMpdnvsBINdVQbpCWgDlfSMqTzPeIrVTMOrmbaSfQqrFs";
        p3 = "XYMpDnVSBIndvQBPCWGDlFsMqtzpEiRVTMORMBASFqQrfS";
        int t4[] = {-82,-35,-51,52,87,25,8,27,-12,-10,-63,-36,-95,-35,-98,95,-76,7,36,-35,92,23,-94,-31,-30,36,51,-49,-19,-3,19,32,58,82,-36,-87,-54,-17,-40,32,-91,-56,0,-16,70,42};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {-36,77,90,50,83,66,-94,-66,-22,-83,-86,-89,-55,-3,-51,18,-41,-91,91,32,-25,-60,5,79,100,85,60,98,55,95,-67,-46,-26,48,-64,16,-36,-95,-54,19,96,79,78,-91,-12,35};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        int t6[] = {-1,-1,1,-1,3,-1,-1,1,3,5,4,0,-1,-1,2,8,5,4,-1,10,11,14,3,-1,15,-1,7,-1,8,-1,-1,15,-1,-1,30,-1,26,26,-1,-1,-1,-1,-1,31,0,3};
        p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
        p7 = -356.875;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "fOai";
        p1 = "Foai";
        p2 = "fOAI";
        p3 = "FOAi";
        int t4[] = {96,21,-34,-81};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        int t5[] = {77,-2,20,25};
        p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
        int t6[] = {-1,0,-1,-1};
        p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
        p7 = 44.5;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, true, p7) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
