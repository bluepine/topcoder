#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class AutoLoan {
public:
	double calc(double p, double m, int l, double r) {
        r /= 1200.0;
        while (l > 0) {
            p = p*(1.0+r)-m;
            l--;
        }
        return p;
    }

    double interestRate(double p, double m, int l) {
	    double lo = 0.0, hi = 100.0;
        while (lo < hi*(1.0-1e-9)) {
            double mid = lo+(hi-lo)/2.0;
            double b = calc(p, m, l, mid);
            if (b > 0.0) hi = mid;
            else lo = mid;
        }

        return lo;
	}


};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, double p0, double p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	AutoLoan *obj;
	double answer;
	obj = new AutoLoan();
	clock_t startTime = clock();
	answer = obj->interestRate(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	double p0;
	double p1;
	int p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = 6800;
	p1 = 100;
	p2 = 68;
	p3 = 1.3322616182218813E-13;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
    {
    // ----- test 1 -----
    p0 = 2000;
    p1 = 510;
    p2 = 4;
    p3 = 9.56205462458368;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    p0 = 15000;
    p1 = 364;
    p2 = 48;
    p3 = 7.687856394581649;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
