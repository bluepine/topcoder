#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int dp[1<<18];

class SeparateConnections {
public:
	int howMany(vector<string> mat) {
		int n = mat.size();
		int N = 1<<n;
		for (int k = 0; k < N; k++) dp[k] = 0;
		int res = 0;
		for (int k = 0; k < N; k++) {
			if ((count(k)&1) != 0) continue;
			for (int i = 0; i < n; i++) {
				if ((k&(1<<i)) == 0) continue;
				for (int j = 0; j < n; j++) {
					if ((k&(1<<j)) == 0) continue;
					if (mat[i][j] == 'N') continue;
					int t = k;
					t &= ~(1<<i);
					t &= ~(1<<j);
					dp[k] = max(dp[k], dp[t]+2);
					res = max(res, dp[k]);
				}
			}
		}
		return res;
	}

	int count(int x) {
		int res = 0;
		while (x) {
			x &= (x-1);
			res++;
		}
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SeparateConnections *obj;
	int answer;
	obj = new SeparateConnections();
	clock_t startTime = clock();
	answer = obj->howMany(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
		// ----- test 0 -----
		string t0[] = {"NYYYY","YNNNN","YNNNN","YNNNN","YNNNN"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"NYYYY","YNNNN","YNNNY","YNNNY","YNYYN"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 4;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"NNYYYYYYYYYYYYYYYY","NNYYYYYYYYYYYYYYYY","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN","YYNNNNNNNNNNNNNNNN"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 4;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = {"NNNNNNNNNYNNNNNYN","NNNNNNNNNNNNNNNNN","NNNNNNNYNNNNNNNNN","NNNNNYNNNNNYNNYYY","NNNNNNNNNNNNNNNYN","NNNYNNNNNNNNNNYNN","NNNNNNNNNYNNNNNNN","NNYNNNNNNNNNNNNNN","NNNNNNNNNYNNNNNNN","YNNNNNYNYNNNNNNNY","NNNNNNNNNNNNNNNNN","NNNYNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNN","NNNYNYNNNNNNNNNNN","YNNYYNNNNNNNNNNNN","NNNYNNNNNYNNNNNNN"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 10;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
