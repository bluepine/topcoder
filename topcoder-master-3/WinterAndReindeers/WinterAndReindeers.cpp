#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>

using namespace std;

int dp1[2500][2500];
int dp2[2500][2500];
int M, N, L;

class WinterAndReindeers {
public:
	int getNumber(vector <string> allA, vector <string> allB, vector <string> allC) {
		string a = toString(allA);
		string b = toString(allB);
		string c = toString(allC);
		M = a.size();
		N = b.size();
		L = c.size();
		for (int i = 0; i <= M-1; i++)
			for (int j = 0; j <= M-1; j++)
				dp1[i][j] = dp2[i][j] = 0;

		for (int i = 0; i <= M-1; i++) {
			for (int j = 0; j <= N-1; j++) {
				if (a[i] == b[j]) dp1[i][j] = get1(i-1, j-1)+1;
				else dp1[i][j] = max(get1(i-1, j), get1(i, j-1));
			}
		}

		for (int i = M-1; i >= 0; i--) {
			for (int j = N-1; j >= 0; j--) {
				if (a[i] == b[j]) dp2[i][j] = get2(i+1, j+1)+1;
				else dp2[i][j] = max(get2(i+1, j), get2(i, j+1));
			}
		}

		auto as = strStr(a, c);
		auto bs = strStr(b, c);
		int res = 0;
		for (auto it1 : as) {
			for (auto it2 : bs) {
				int sub = L+get1(it1.first-1, it2.first-1)+get2(it1.second+1, it2.second+1);
				if (sub > res) res = sub;
			}
		}

		return res;
	}

	vector<pair<int, int> > strStr(string & x, string & y) {
		vector<pair<int, int> > res;
		for (int k = 0; k < (int)x.size(); k++) {                    
			if (x[k] != y[0]) continue;                 
			int i = k;
			int j = 0;
			while (i < (int)x.size()) {
				if (x[i] == y[j]) j++;
				if (j == (int)y.size()) {
					res.push_back(make_pair(k, i));
					break;
				}
				i++;
			}
		}
		return res;
	}

	int get1(int i, int j) {
		if (i < 0|| j < 0) return 0;
		return dp1[i][j];
	}

	int get2(int i, int j) {
		if (i >= M || j >= N) return 0;
		return dp2[i][j];
	}

	string toString(vector<string> & vs) {
		string res = "";
		for (int i = 0; i < (int)vs.size(); i++) res += vs[i];
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	WinterAndReindeers *obj;
	int answer;
	obj = new WinterAndReindeers();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	int p3;

	{
		// ----- test 0 -----
		string t0[] = {"X"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"X","Y"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"X"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"ABCXD"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"BCDEF"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"CD"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"WE","LOVE"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"WORKING","FOR","SANTA"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"JK"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = {"ABCDE"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"CDEAB"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"B"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 2;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = {"ABCABDEGAXAHDJBAAHFJDXBB","ABHFHCDALFDJDBBA","BABBAXAXXX"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"ABLOCBAXBAHAJDXBIJKA","JBABCDAHKFIUDALPJAH","AABACX"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"AXBADXBBAB","CDD"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 23;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		string t0[] = {"ABCDBAXBZZBBCC", "A", "Z", "AA", "BBBBBBBBBBBBBBBBBBB"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"ACDXBABABXXC", "ZZZZBBBB", "ZZZZZBBBBBBB", "ZZZZZZZZZZZZZZZZZZZZZ"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"AB"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		p3 = 20;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
