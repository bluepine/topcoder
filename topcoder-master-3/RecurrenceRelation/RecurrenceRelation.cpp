#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class RecurrenceRelation {
public:
	int moduloTen(vector <int> coefficients, vector <int> initial, int N) {
        int K = coefficients.size();
        if (N < K) {
            return mod(initial[N]);
        }
        for (int i = K; i <= N; ++i) {
            int x = 0;
            for (int k = 0; k < K; ++k) {
                x += mod(coefficients[k]*initial[k]);
            }
            x = mod(x);
            //cout << "x:" << x << endl;
            int k = 0;
            while(k < K-1) {
                initial[k] = initial[k+1];
                ++k;
            }
            initial[k] = x;
            //for (auto it : initial) {
                //cout << it << " ";
            //}
            //cout << endl;
        }
        
        return initial[K-1];
	}

    int mod(int num) {
        if (num < 0) {
            return (10-((0-num)%10))%10;
        }
        return num%10;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	RecurrenceRelation *obj;
	int answer;
	obj = new RecurrenceRelation();
	clock_t startTime = clock();
	answer = obj->moduloTen(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	p3 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
    {
    // ----- test 1 -----
    int t0[] = {1,1};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {0,1};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 9;
    p3 = 4;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    int t0[] = {2};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {1};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 20;
    p3 = 6;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    int t0[] = {2};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {1};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 64;
    p3 = 6;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    int t0[] = {25,143};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {0,0};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 100000;
    p3 = 0;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 5 -----
    int t0[] = {9,8,7,6,5,4,3,2,1,0};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {1,2,3,4,5,6,7,8,9,10};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 654;
    p3 = 5;
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 6 -----
    int t0[] = {901,492,100};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {-6,-15,-39};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 0;
    p3 = 4;
    all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
