#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

struct Node {
    string tag;
    vector<Node> next;
    
    Node(vector<string> & vs, int & i) {
        this->tag = vs[i++];
        this->next = vector<Node>();
        while (vs[i][0] != '/')
            this->next.push_back(Node(vs, i));
        i++;
    }

    static Node build(vector<string> & ds) {
        int i = 0;
        vector<string> vs = parse(ds);
        return Node(vs, i);
    }
    
    static vector<string> parse(vector<string> & ds) { 
        string str = "";
        for (size_t i = 0; i < ds.size(); i++)
            str += ds[i];
        vector<string> res;
        size_t start = 0, end = 0;
        while (true) {
            while (start < str.size() && str[start] != '<') start++;
            if (start == str.size()) break;
            end = start;
            while (end < str.size() && str[end] != '>') end++;
            res.push_back(str.substr(start+1, end-start-1));
            start = end+1;
        }

        //for (size_t i = 0; i < res.size(); i++)
        //cout << res[i] << " ";
        //cout << endl;
        return res;
    }

    void print() {
        cout << this->tag << endl;
        for (size_t i = 0; i < this->next.size(); i++)
            this->next[i].print();
    }

    int size() {
        int res = 1;
        for (size_t i = 0; i < this->next.size(); i++)
            res += this->next[i].size();
        return res;
    }

    bool hasSubTree(Node & other) {
        if (this->tag != other.tag || this->next.size() < other.next.size()) return false;
        size_t j = 0;
        for (size_t i = 0; i < this->next.size(); i++)
            if (j < other.next.size() && this->next[i].hasSubTree(other.next[j]))
                j++;
        return (j == other.next.size());
    }
};

class bloggoDocStructure {
public:
    string compare(vector <string> docA, vector <string> docB) {
        Node a = Node::build(docA);
        //a.print();
        Node b = Node::build(docB);
        //b.print();
        bool as = a.hasSubTree(b);
        bool bs = b.hasSubTree(a);
        if (as && bs) return "equivalent";
        if (as) return "outtree " + toString(a.size()-b.size());
        if (bs) return "intree " + toString(b.size()-a.size());
        return "incompatible";
    }

    string toString(int num) {
        ostringstream os;
        os << num;
        return os.str();
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, string p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    bloggoDocStructure *obj;
    string answer;
    obj = new bloggoDocStructure();
    clock_t startTime = clock();
    answer = obj->compare(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p2 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;
    string p2;

    //{
    //// ----- test 0 -----
    //string t0[] = {"<html> <h1>Snapping Turtles</h1> <ul> <li> <h2>","Common Snapping Turtle (<i>Chelydra serpentina</i>",") </h2> <p> With its dark coloring, sinuous neck,","and swift lunging motion, Chelydra serpentina is a","n adept hunter. </p><p> The snapping turtle rarely","basks. </p><p> Snapping turtle populations are jeo","pardized by automobile traffic.   </","p>    </li> <li> <h2> Alligator Snapping Turtle (","<i>Macroclemys temminckii</i>) </h2> <p> Like the"," common snapping turtle, the alligator snapping ","turtle has a massive head.</p><p>This is the lar","gest freshwater turtle. A tubular pink append","age grows from its mouth.</p>   <","/li> </ul> </html>"};
    //p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    //string t1[] = {" <html> turtles <h1> snapping </h1> <ul> <li> <h2","> common <i> chelydra serpentina </i> </h2> <p>","hunter </p> (adept?) <p> rarely basks </p> (hmm)","<p> jeopardized by traffic </p></li>","<li> often confused with... <h2> alligator snapp","ing turtle <i>macroclemys temminckii</i> </h2>","<p> massive head </p> big! <p>","largest freshwater turtle. pink wormlike thing <","/p></li></ul></html>  "};
    //p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    //p2 = "equivalent";
    //all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    //// ------------------
    //}

    {
        // ----- test 1 -----
        string t0[] = {" <html> turtles <h1> snapping </h1> <ul> <li> <h2","> common <i> chelydra serpentina </i> </h2> <p>","hunter </p> (adept?) <p> rarely basks </p> (hmm)","<p> jeopardized by traffic </p></li>","<li> often confused with... <h2> alligator snapp","ing turtle <i>macroclemys temminckii</i> </h2>","<p> massive head </p> big! <p>","largest freshwater turtle. pink wormlike thing <","/p></li></ul></html>  "};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"<html><h1></h1><ul><li><h2><i></i></h2><p></p><p>","</p><p></p></li><li><h2><i></i></h2><p></p><p></p","></li></ul></html>"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "equivalent";
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"<html><h1></h1><ul><li><h2><i></i></h2><p></p><p>","</p><p></p></li><li><h2><i></i></h2><p></p><p></p","></li></ul></html>"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {" <html> snapping turtles <ul> <li> common ","snapping turtle, chelydra serpentina <p>","hunter </p> <p> rarely basks </p> ","<p> jeopardized by traffic </p></li>","<li> often confused with... <h2> alligator snapp","ing turtle <i>macroclemys temminckii</i> </h2>","<p> massive head; largest freshwater turtle;","pink wormlike appendage lures fish </p>","</li></ul></html>  "};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "outtree 4";
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"<html><h1></h1><ul><li><h2><i></i></h2><p></p><p>","</p><p></p></li><li><h2><i></i></h2><p></p><p></p","></li></ul></html>"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {" <html> turtles <h1> snapping </h1> <ul> <li> <h2","> common <i> chelydra serpentina </i> </h2> <p>","hunter </p> <p> rarely basks <h3>","<i>almost</i> <b>never</b> </h3> </p>","<p> jeopardized by traffic </p></li>","<li> often confused with... <h2> alligator snapp","ing turtle <i>macroclemys temminckii</i> </h2>","<p> massive head </p> big! <p>","largest freshwater turtle. </p> <p> <b>pink</b>"," <b>wormlike</b> lure in mouth </p> <p> imposing","sight on land or water </p> </li></ul></html>  "};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "intree 7";
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"<html><h1></h1><ul><li><h2><i></i></h2><p></p><p>","</p><p></p></li><li><h2><i></i></h2><p></p><p></p","></li></ul></html>"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"<html><ul><li><h2><i></i></h2><p></p><p>","</p><p></p></li><li><h2><i></i></h2><p></p><p></p","></li></ul><h1></h1></html>"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "incompatible";
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        string t0[] = {"<html></html>"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"<html><html><html></html><html></html><ul>","</ul><ol></ol></html></html>"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "intree 5";
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        string t0[] = {"<html><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p"
            "><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></"
                "p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><b></b></html>"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"<html><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p"
            "><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></"
                "p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p><p></p>","<p></p><p></p><p></p><p></p><p></p><p></p></html>"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = "incompatible";
        all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
