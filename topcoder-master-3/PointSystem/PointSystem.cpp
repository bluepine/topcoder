#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class PointSystem {
public:
    double oddsOfWinning(int pointsToWin, int pointsToWinBy, int skill) {
        int N = 2000;
        vector<vector<double> > dp(N+1, vector<double>(N+1, 0.0));
        double p = skill/100.0;
        dp[0][0] = 1.0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if ((i >= pointsToWin) && (i-j >= pointsToWinBy)) continue;
                if ((j >= pointsToWin) && (j-i >= pointsToWinBy)) continue;
                dp[i+1][j] += dp[i][j]*p;
                dp[i][j+1] += dp[i][j]*(1-p);
            }
        }

        double res = 0.0;
        for (int j = 0; j+pointsToWinBy <= pointsToWin; j++) {
            res += dp[pointsToWin][j];
        }

        for (int i = max(pointsToWin+1, pointsToWinBy); i < N; i++) {
            res += dp[i][i-pointsToWinBy];
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
    cout << "]" << endl;
    PointSystem *obj;
    double answer;
    obj = new PointSystem();
    clock_t startTime = clock();
    answer = obj->oddsOfWinning(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    double p3;

    {
        // ----- test 0 -----
        p0 = 2;
        p1 = 1;
        p2 = 40;
        p3 = 0.352;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 4;
        p1 = 5;
        p2 = 50;
        p3 = 0.4999999999999998;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 3;
        p1 = 3;
        p2 = 25;
        p3 = 0.035714285714285705;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
