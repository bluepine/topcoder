#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class GeneralChess {
public:
    vector <string> attackPositions(vector <string> pieces) {
        map<pair<int, int>, int> ms;
        for (int i = 0; i < (int)pieces.size(); ++i) {
            size_t found = pieces[i].find_first_of(',');
            pieces[i][found] = ' ';
            istringstream is(pieces[i]);
            int x, y;
            is >> x >> y;
            pair<int, int> p;
            p = make_pair(x+2, y+1);
            if (ms.find(p) == ms.end()) ms[p] = 1;
            else ++ms[p];
            p = make_pair(x-2, y+1);
            if (ms.find(p) == ms.end()) ms[p] = 1;
            else ++ms[p];
            p = make_pair(x+2, y-1);
            if (ms.find(p) == ms.end()) ms[p] = 1;
            else ++ms[p];
            p = make_pair(x-2, y-1);
            if (ms.find(p) == ms.end()) ms[p] = 1;
            else ++ms[p];
            p = make_pair(x+1, y+2);
            if (ms.find(p) == ms.end()) ms[p] = 1;
            else ++ms[p];
            p = make_pair(x+1, y-2);
            if (ms.find(p) == ms.end()) ms[p] = 1;
            else ++ms[p];
            p = make_pair(x-1, y+2);
            if (ms.find(p) == ms.end()) ms[p] = 1;
            else ++ms[p];
            p = make_pair(x-1, y-2);
            if (ms.find(p) == ms.end()) ms[p] = 1;
            else ++ms[p];
        }

        vector<string> res;
        map<pair<int, int>, int>::iterator it = ms.begin();
        while (it != ms.end()) {
            if (it->second == pieces.size()) {
                ostringstream os;
                os << it->first.first << "," << it->first.second;
                res.push_back(os.str());

            }
            ++it;
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    GeneralChess *obj;
    vector <string> answer;
    obj = new GeneralChess();
    clock_t startTime = clock();
    answer = obj->attackPositions(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << "\"" << p1[i] << "\"";
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << answer[i] << "\"";
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p1.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p1[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;

    {
        // ----- test 0 -----
        string t0[] = {"0,0"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"-2,-1","-2,1","-1,-2","-1,2","1,-2","1,2","2,-1","2,1"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"2,1","-1,-2"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"0,0","1,-1"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"0,0","2,1"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"-1000,1000","-999,999","-999,997"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"-1001,998"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
