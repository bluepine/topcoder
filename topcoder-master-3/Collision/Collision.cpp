#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Collision {
public:
    double probability(vector <int> assignments, int ids) {
        return p2(assignments, ids) - p1(assignments, ids);
    }

    double p1(vector<int> & v, int n) {
        int s = 0;
        for (int i = 0; i < (int)v.size(); ++i)
            s += v[i];
        if (s > n) return 0.0;
        int j = 0;
        double res = 1.0;
        while (j < s) {
            res *= (1.0 - (double)j/n);
            ++j;
        }
        return res;
    }

    double p2(vector<int> & v, int n) {
        double res = 1.0;
        int s = v[0];
        for (int i = 1; i < (int)v.size(); ++i) {
            int j = n-v[i]+1;
            if (s > j) return 0.0;
            while (j <= n) {
                res *= (1.0 - (double)s/j);
                if (j == numeric_limits<int>::max()) break;
                ++j;
            }
            s += v[i];
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, double p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    Collision *obj;
    double answer;
    obj = new Collision();
    clock_t startTime = clock();
    answer = obj->probability(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    double p2;

    {
        // ----- test 0 -----
        int t0[] = {20,20};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1000;
        p2 = 0.2113618990410422;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {123,456};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 123456;
        p2 = 0.3769052883184334;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2147483647;
        p2 = 0.0069090268185510555;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {1005,1005};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1000;
        p2 = 0.0;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
